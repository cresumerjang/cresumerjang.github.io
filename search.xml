<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ESLint, Prettier로 프로젝트 관리하기 1편</title>
      <link href="/2022/05/01/eslint-prettier-1/"/>
      <url>/2022/05/01/eslint-prettier-1/</url>
      
        <content type="html"><![CDATA[<p>오랜만에 개인 프로젝트를 시작하면서 개발 환경을 직접 세팅해 보기로 했습니다.</p><p>사실 크게 세팅이라고 할만한 건 없고 코드 퀄리티와 포맷팅을 위한 ESLint, Prettier를 적용하는 정도의 세팅이었습니다. 혼자 진행하는 프로젝트라 굳이 필요할까 싶지만, 항상 ESLint, Prettier의 도움을 받아왔기 때문에 막상 없으면 불편할 것 같았고, 회사에서는 이미 세팅된 저장소에서만 작업하다 보니 직접 관련 설정을 건드릴 기회가 없었습니다. 때문에 이번 기회에 직접 세팅해 보기로 하였습니다.</p><p>포스팅으로 정리하는 만큼 코드 퀄리티와 포맷팅이 왜 필요한지부터 하나씩 정리해가며 프로젝트에 ESLint 와 Prettier 를 적용해 보도록 하겠습니다.</p><h1>코드 퀄리티, 포맷은 왜 관리하는걸까?</h1><p><strong>코드 퀄리티</strong>는 말 그대로 코드 품질에 대한 관리를 말합니다.</p><p><strong>코드 퀄리티를 관리하면</strong> 주석이나 사용되지 않는 코드, 디버깅을 위한 코드, 에러를 유발할 수 있는 코드 등 운영 환경에 필요하지 않거나 위험이 되는 코드가 운영 환경에 포함되지 않도록 할 수 있어 사용자에게 보다 안정적으로 서비스를 제공할 수 있을 뿐만 아니라 개발자 경험도 향상시킬 수 있습니다.</p><p><strong>코드 포맷팅</strong>은 코드를 작성하는 스타일을 말하며, 개인의 취향이 반영되는 부분입니다.<br>여러 명의 개발자가 하나의 프로젝트를 진행하게 되면 프로젝트 내에 다양한 코드 포맷이 혼재하게 됩니다. '코드 포맷이 다를 수도 있지 않나?'정도로 생각할 수 있지만, 경험해본 바로는 작업자가 많아질수록 점점 코드 읽기가 어려워져 코드 리뷰, 유지보수, 장애 대응 시 불필요한 에너지를 소모하게 되는 불편함이 있었습니다.</p><p><strong>코드 포맷을 관리하면</strong> 앞에서 언급한 불편함을 줄일 수 있어 생산성 향상을 기대할 수 있습니다.</p><p>때문에 이미 많은 프로젝트에서 코드 퀄리티와 포맷팅을 관리하여 이점을 누리고 있습니다. 추가로 코드 퀄리티와 포맷팅 관리를 쉽게 해줄 수 있는 ESLint, Prettier 와 같은 툴들을 사용하면 큰 노력 없이 몇 가지 설정만으로 어느 정도 코드 퀄리티의 보장을 기대할 수 있습니다.</p><p>이제부터 코드 퀄리티, 포맷팅 관리를 위한 툴을 알아보고 설정 및 사용법, 자동화하는 방법까지 하나씩 알아보도록 하겠습니다.</p><h1>코드 퀄리티 관리</h1><p>코드 퀄리티 관리는 <a href="https://www.npmjs.com/package/eslint">ESLint</a>라는 패키지를 사용하여 관리합니다. ESLint 는 코드 퀄리티 관리를 위해 가장 많이 사용되는 패키지로 해당 패키지를 사용하여 코드 퀄리티 관리를 위한 규칙을 설정하고 해당 규칙을 강제로 적용하거나 관련 리포트를 제공받아 코드 퀄리티를 관리할 수 있습니다.</p><h3 id="Install"><a class="header-anchor" href="#Install"></a>Install</h3><p><code>ESLint</code> 를 프로젝트의 <code>devDependencies</code> 패키지로 설치합니다.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D eslint</span><br></pre></td></tr></table></figure><h3 id="Configuration-File"><a class="header-anchor" href="#Configuration-File"></a>Configuration File</h3><p>ESLint 설정을 위해 설정 파일을 생성해 줘야 하는데 아래와 같이 간단한 명령어를 통해 기본적인 설정 파일을 생성할 수 있습니다.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> init @eslint/config</span><br></pre></td></tr></table></figure><p>위 명령어를 실행하면 아래와 같이 단계별로 선택지가 나오며 최종 선택까지 완료하면 <code>.eslintrc.js</code> 와 같은 설정 파일이 <code>root/</code> 디렉토리에 생성됩니다.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">How would you like to <span class="keyword">use</span> ESLint? · problems</span><br><span class="line">✔ What <span class="keyword">type</span> of modules does your project <span class="keyword">use</span>? · esm</span><br><span class="line">✔ <span class="keyword">Which</span> framework does your project <span class="keyword">use</span>? · react</span><br><span class="line">✔ Does your project <span class="keyword">use</span> TypeScript? · <span class="keyword">No</span> / Yes</span><br><span class="line">✔ Where does your code <span class="keyword">run</span>? · browser</span><br><span class="line">? What <span class="keyword">format</span> <span class="keyword">do</span> you want your config <span class="keyword">file</span> to be <span class="keyword">in</span>? …</span><br><span class="line">❯ JavaScript</span><br><span class="line">YAML</span><br><span class="line">JSON</span><br></pre></td></tr></table></figure><p>ESLint 설정 파일은 아래와 같은 형식으로 관리되며 <code>js</code>, <code>json</code>, <code>yaml</code> 같은 확장자를 지원합니다. 자세한 내용은 공식문서 <a href="https://eslint.org/docs/user-guide/configuring/">설정 가이드</a>를 참고해주세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123; <span class="attr">project</span>: [<span class="string">&quot;./tsconfig.json&quot;</span>] &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;@typescript-eslint&quot;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@typescript-eslint/strict-boolean-expressions&quot;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">allowString</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">allowNumber</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ignorePatterns</span>: [<span class="string">&quot;src/**/*.test.ts&quot;</span>, <span class="string">&quot;src/frontend/generated/*&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ESLint 규칙은 설정파일 내에서 <code>extends</code>, <code>rules</code> 두 곳에 위치할 수 있습니다.</p><ul><li><strong>extends</strong>: 미리 준비된 ESLint configuration을 확장하는 경우 사용<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;airbnb&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><strong>rules</strong>: ESLint에 적용할 규칙 직접 선언하는 경우 사용<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; <span class="attr">allow</span>: [<span class="string">&quot;warn&quot;</span>, <span class="string">&quot;error&quot;</span>] &#125;],</span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; <span class="attr">vars</span>: <span class="string">&quot;all&quot;</span>, <span class="attr">args</span>: <span class="string">&quot;after-used&quot;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>설정 가능한 <a href="https://eslint.org/docs/rules/">규칙 가이드</a>를 보면 아래 <strong>Rules Group</strong> 과 같이 그룹핑 되어 있고 각 규칙 앞에 <strong>Info Icon</strong> 과 같은 아이콘을 표시하고 있습니다.</p><p><strong>Rules Group</strong></p><ul><li><code>Possible Problems</code> : 논리적인 에러 관련 규칙<ul><li>no-unused-vars : 사용하지 않은 변수 불허 강제</li></ul></li><li><code>Suggestions</code> : 논리적 에러가 아닌 강제할 수 있는 규칙<ul><li>camelcase : Camel 네이밍 컨벤션 강제</li><li>no-console : console 사용 불가 강제</li></ul></li><li><code>Layout &amp; Formatting</code> : 코드가 보이는 방식에 대한 규칙<ul><li>semi : 세미콜론 여부 규칙</li><li>quote : 큰따옴표, 작은 따옴표, 백틱표기 규칙</li></ul></li></ul><p><strong>Info Icon</strong></p><ul><li>✓ : <code>&quot;extends&quot;: &quot;eslint:recommended&quot;</code> 선언시 적용되는 규칙</li><li>🔧 : ESLint CLI 실행시 <code>--fix</code> 옵션 붙여져 있다면 자동으로 고쳐지는 규칙</li><li>💡: 자동으로 고쳐지지 않기 때문에 직접 고쳐야 하는 규칙</li></ul><p>특징적인 부분은 Rules Group 의 Layout &amp; Formatting 에서 보여지듯이 코드 퀄리티와 관련된 규칙뿐만 아니라 포맷팅 관련 규칙도 지정할 수 있다는 것 입니다. 뒤에서 다루겠지만 보통 코드 포맷팅은 Prettier 가 담당하기 때문에 헷갈릴 수 있으며, 실제로도 Prettier 의 포맷팅 규칙과 충돌하여 의도한 것과 다른 포맷이 코드에 적용 될 수도 있습니다.</p><p>때문에 Prettier 와 같이 사용할 경우 포맷팅 규칙에 대해 주의하여 사용할 필요가 있습니다. 포맷팅 규칙 이슈는 ESLint &amp; Prettier 적용하면서 자세히 알아보도록 하겠습니다.</p><h3 id="Command-Line-Interface"><a class="header-anchor" href="#Command-Line-Interface"></a>Command Line Interface</h3><p>설정파일 작성이 끝났다면 아래와 같이 ESLint CLI 를 사용하여 코드 퀄리티 검증을 수행할 수 있으며 <code>--fix</code> 옵션을 사용하여 자동으로 코드를 수정하게 할 수도 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint <span class="attribute">src</span><span class="comment">/**/</span>*<span class="selector-class">.js</span> <span class="attr">--fix</span></span><br></pre></td></tr></table></figure><p><code>--fix</code>외 자세한 옵션은 <a href="https://eslint.org/docs/user-guide/command-line-interface">CLI 가이드</a>를 확인해주세요.</p><h3 id="Practice"><a class="header-anchor" href="#Practice"></a>Practice</h3><p>앞에서 코드 퀄리티 관리를 위한 ESLint의 설치, 설정파일, CLI 까지 간략하게 살펴 보았습니다. 지금부터는 ESLint 설정에 따라 ESLint 가 실제로 어떻게 동작하는지 확인해 보겠습니다.</p><ol><li><p>테스트를 위해 설정 파일 <code>.eslintrc.js</code> 를 아래와 같이 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; <span class="attr">allow</span>: [<span class="string">&quot;warn&quot;</span>, <span class="string">&quot;error&quot;</span>] &#125;], <span class="comment">// 콘솔 X</span></span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; <span class="attr">vars</span>: <span class="string">&quot;all&quot;</span>, <span class="attr">args</span>: <span class="string">&quot;after-used&quot;</span> &#125;], <span class="comment">// 사용하지 않는 변수 X</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>ESLint를 실행할 파일 <code>test.js</code> 를 생성하고 아래와 같이 코드를 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;blabla&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> items = <span class="title function_">fetchItems</span>(params);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(items);</span><br></pre></td></tr></table></figure></li><li><p><code>test.js</code> 파일에 대해 ESLint 를 실행합니다.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint <span class="string">./test.js</span> <span class="params">--fix</span></span><br></pre></td></tr></table></figure><p>ESLint 설정 파일에 콘솔과 사용하지 않은 변수에 대해 <code>&quot;error&quot;</code> 로 판단하도록 설정하였기 때문에 아래와 같은 결과를 출력하게 됩니다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1:7 <span class="built_in">error</span> <span class="string">&#x27;message&#x27;</span> is assigned a value but never used no-unused-vars</span><br><span class="line">3:1 <span class="built_in">error</span> Unexpected<span class="built_in"> console </span>statement no-console</span><br></pre></td></tr></table></figure></li></ol><!-- 살펴본 것과 같이 설정 파일에 간한한 설정을 추가하는 것 만으로도 코드 퀄리티를 높ㅇ --><h1>코드 포맷팅 관리</h1><p>코드 포맷팅 관리는 <a href="https://www.npmjs.com/package/prettier">Prettier</a> 라는 패키지를 사용하여 관리합니다. 작업자가 여러명인 프로젝트에서도 일관된 코드 스타일을 유지시켜주는 역할을 합니다.</p><h3 id="Install-2"><a class="header-anchor" href="#Install-2"></a>Install</h3><p><code>Prettier</code> 를 프로젝트의 <code>devDependencies</code> 패키지로 설치합니다.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D <span class="comment">--save-exact prettier</span></span><br></pre></td></tr></table></figure><h3 id="Configuration-File-2"><a class="header-anchor" href="#Configuration-File-2"></a>Configuration File</h3><p>Prettier 설정은 <code>package.json</code> 이나 <code>.prettierrc.js</code> 와 같은 별도의 설정 파일을 생성하여 사용하는데 지원 형식은 아래와 같습니다.</p><ul><li><code>package.json</code> 파일 내 <code>&quot;prettier&quot;</code> 키에 설정</li><li><code>JSON</code>, <code>YAML</code> 로 작성된 <code>.prettierrc</code> 파일</li><li><code>.prettierrc.json</code>, <code>.prettierrc.yml</code>, <code>.prettierrc.yaml</code>, <code>.prettierrc.json5</code>, <code>.prettierrc.toml</code> 파일</li><li><code>.prettierrc.js</code>, <code>.prettierrc.cjs</code>, <code>prettier.config.js</code>, <code>prettier.config.cjs</code> 와 같이 <code>module.exports</code> 사용하여 설정 객체를 <code>export</code> 한 파일</li></ul><p>설정 파일을 별도로 생성하는 경우 아래와 같이 Prettier 포맷팅 규칙을 선언합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>설정 파일과 규칙에 대한 자세한 내용은 <a href="https://prettier.io/docs/en/configuration.html">설정파일 가이드</a>, <a href="https://prettier.io/docs/en/options.html">규칙 가이드</a>를 참고해주세요.</p><h3 id="Command-Line-Interface-2"><a class="header-anchor" href="#Command-Line-Interface-2"></a>Command Line Interface</h3><p>command line 으로 prettier 를 실행하기 위해 아래 명령어를 터미널에서 실행합니다. <code>--write</code> 옵션은 ESLint 의 <code>--fix</code> 옵션과 같은 역할을 하는 옵션으로 자동으로 포맷을 수정시킬 수 있습니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prettier <span class="attribute">src</span><span class="comment">/**/</span>*<span class="selector-class">.js</span> <span class="attr">--write</span></span><br></pre></td></tr></table></figure><p><code>--write</code> 외 자세한 옵션은 <a href="https://prettier.io/docs/en/cli.html">CLI 가이드</a>를 참고해 주세요.</p><h3 id="Practice-2"><a class="header-anchor" href="#Practice-2"></a>Practice</h3><ol><li><p>테스트를 위해 설정 파일 <code>.prettierrc.js</code> 를 아래와 같이 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Prettier 를 실행할 파일 <code>test.js</code> 를 생성하고 아래와 같이 코드를 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;blabla&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> items = [];</span><br><span class="line"><span class="keyword">if</span> (!!items.<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`아이템이 <span class="subst">$&#123;items.length&#125;</span>개 있습니다.`</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;아이템이 없습니다&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>test.js</code>파일에 대해 Prettier 를 실행합니다.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prettier <span class="string">./test.js</span> <span class="params">--write</span></span><br></pre></td></tr></table></figure><p>Prettier 실행 후 Diff 를 보면 아래와 같이 설정한 포맷팅에 대해 적용된 것을 확인할 수 있습니다.</p><img src="img/prettier.png" width="460"/></li></ol><h1>End</h1><p>지금까지 코드 퀄리티 관리를 위한 ESLint 와 코드 포맷팅을 위한 Prettier 에 대해 알아봤습니다. 다음 편에서는 프로젝트에 ESLint 와 Prettier 를 적용하는 방법에 대해서 알아 보도록 하겠습니다.</p><p>궁금한 점이나 잘 못된 내용이 있으면 피드백 부탁드립니다.<br>읽어주셔서 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
            <tag> eslint </tag>
            
            <tag> prettier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Promise</title>
      <link href="/2020/12/01/javascript-promise/"/>
      <url>/2020/12/01/javascript-promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Contents-2"><a class="header-anchor" href="#Contents-2"></a>Contents</h2><ul><li><a href="#promise-%EB%9E%80">Promise 란?</a></li><li><a href="#promise-%EC%83%81%ED%83%9C">Promise 상태</a></li><li><a href="#promise-%EC%B2%98%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C">Promise 처리 메소드</a></li><li><a href="#promise-%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C">Promise 정적 메소드</a></li></ul><h2 id="Promise-란"><a class="header-anchor" href="#Promise-란"></a>Promise 란?</h2><p>Promise 는 ES6 명세에 추가된 <strong>비동기 처리를 위한 표준 내장 객체</strong>로 비동기 처리에 대한 <strong>상태</strong>(대기, 완료, 실패)와 <strong>결과값</strong>을 가지는 객체입니다.</p><p><img src="img/promise.png" alt=""></p><blockquote><p><strong>비동기 처리</strong> : Callstack 에 쌓여 동기적으로 실행되지 않는 코드를 말합니다. setTimeout, dom 에 바인딩된 콜백 함수, ajax 요청등이 비동기 처리의 대표적인 예입니다.</p></blockquote><h2 id="Promise-상태"><a class="header-anchor" href="#Promise-상태"></a>Promise 상태</h2><p>Promise 객체는 비동기 처리에 대한 <strong>상태</strong>를 가집니다.<br>개념상 <strong>이행되지 않은 상태</strong>와 <strong>이행 또는 거부 완료된 상태</strong>로 분류할 수 있으며 실제로 이행되지 않고 대기중인 상태는 <code>pending</code>, 이행된 상태는 <code>fulfilled</code>, 거부된 상태는 <code>reject</code> 가 됩니다.</p><div class="table__custom"><table><thead><tr><th>상태</th><th>구분</th><th>의미</th></tr></thead><tbody><tr><td>pending</td><td>pending</td><td>비동기 처리가 완료되기 전 상태</td></tr><tr><td>fulfilled</td><td>settled</td><td>비동기 처리가 성공적으로 완료된 상태</td></tr><tr><td>rejected</td><td>settled</td><td>비동기 처리가 실패로 완료된 상태</td></tr></tbody></table></div><p><code>pending</code> 상태에서 <code>settled</code> 상태로 변경되면 더이상 값도 상태도 변경되지 않으며 <code>then</code> 메서드에 의해 대기열에 올라 처리됩니다.</p><h2 id="Promise-처리-메소드"><a class="header-anchor" href="#Promise-처리-메소드"></a>Promise 처리 메소드</h2><p>Promise 객체는 생성되는 시점에는 알수 없는 값, 즉 비동기 처리를 위한 연산이 종료된 이후의 값을 처리하기 위한 <code>then</code>, <code>catch</code>, <code>finally</code> 와 같은 함수를 제공하며 <code>then</code>, <code>catch</code> 메서드는 Promise 객체를 반환하기 때문에 <strong>Chaning</strong>이 가능합니다.</p><h3 id="then"><a class="header-anchor" href="#then"></a>then</h3><p><code>Promise.prototype.then</code> 은 Promise 가 이행된 <strong>settled 상태가 되면 실행</strong>됩니다.<br>아래와 같은 매개변수를 가지며 이행 상태에 따라 매개변수에 지정된 함수를 실행하게 됩니다.</p><ul><li><strong>onFulfilled</strong> : Promise가 수행될 때 호출되는 Function으로, 이행 값(fulfillment value) 하나를 인수로 받습니다.</li><li><strong>onRejected</strong> : Promise가 거부될 때 호출되는 Function으로, 거부 이유(rejection reason) 하나를 인수로 받습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// onFulfilled 실행</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line"><span class="comment">// onRejected 실행</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">rejected</span>().<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><p>Promise 가 fulfilled 상태이거나 rejected 상태일 때, 각각에 해당하는 핸들러 함수(onFulfilled, onRejected) 가 실행되며 <strong>settled 상태와 함께 함수가 반환하는 값을 가지는 Promise 객체를 반환</strong>합니다. <strong>값을 반환하지 않을 경우 fulfilled 상태와 함께 undefined 를 값으로 가지는 Promise 객체를 반환</strong>합니다.</p><h3 id="catch"><a class="header-anchor" href="#catch"></a>catch</h3><p><code>Promise.prototype.catch</code> 는 Promise 수행 결과의 <strong>상태가 rejected 인 경우에만 실행</strong>됩니다. <code>Promise.prototype.then(undefined, onRejected)</code> 코드와 동일하며 실제로 catch 도 내부적으로 해당 코드를 호출합니다. <strong>fulfilled 상태를 가진 Promise 객체를 반환</strong>하며 Promise 를 반환하기 때문에 Chaning 이 가능합니다.</p><h3 id="finally"><a class="header-anchor" href="#finally"></a>finally</h3><p><code>Promise.prototype.finally</code> 는 Promise 수행 결과에 상관없이 Promise 가 처리된 후 <strong>무조건 실행을 보장하는 메서드</strong>이며 <strong>이전 Promise 객체를 그대로 반환</strong>합니다. 특징은 Promise 수행 여부를 알 수 없기 때문에 다른 처리 메서드와는 달리 <strong>어떤 arguments 도 받지 않습니다</strong>.</p><h2 id="Promise-정적-메소드"><a class="header-anchor" href="#Promise-정적-메소드"></a>Promise 정적 메소드</h2><p>Promise 객체는 임의로 상태를 만들거나 비동기 함수를 병렬로 처리하는등 Promise 를 좀더 효율적으로 작성할 수 있는 <code>resolve</code>, <code>reject</code>, <code>all</code>, <code>race</code> 와 같은 static 메소드를 제공합니다.</p><h3 id="resolve"><a class="header-anchor" href="#resolve"></a>resolve</h3><p><code>Promise.resolve</code> 는 <strong>fulfilled 상태를 가지는 Promise 객체를 반환</strong>합니다. 값이 then 가능한 (즉, then 메서드가 있는) 경우, 반환된 프로미스는 then 메서드를 따라가고 마지막 상태를 취합니다. 그렇지 않은 경우 반환된 프로미스는 주어진 값으로 이행합니다.</p><h3 id="reject"><a class="header-anchor" href="#reject"></a>reject</h3><p><code>Promise.reject</code> 는 <strong>rejected 상태를 가지는 Promise 객체를 반환</strong>합니다.</p><h3 id="all"><a class="header-anchor" href="#all"></a>all</h3><p><code>Promise.all(iterable)</code> 은 Promise 담겨 있는 이터러블을 인자로 전달 받고 전달받은 Promise 를 병렬로 처리합니다.<br>iterable 내 <strong>모든 Promise 가 setteld 상태가 되면 Promise 객체를 반환</strong>하지만 iterable 내 Promise 중 <strong>하나라도 rejected 상태를 반환하는 경우 즉시 rejected 상태를 가지는 Promise 를 반환</strong>합니다.</p><h3 id="race"><a class="header-anchor" href="#race"></a>race</h3><p><code>Promise.race(iterable)</code> 는 iterable 내 어떤 Promise 든 <strong>setteld 상태가 되는 즉시 Promise 객체를 반환</strong>합니다.</p><h3 id="allSettled"><a class="header-anchor" href="#allSettled"></a>allSettled</h3><blockquote><p>2020 12월 현재 TC39 Stage 4 Draft 에 올라와 있습니다.</p></blockquote><p><code>Promise.allSettled(iterable)</code> 는 all 과는 달리 <strong>인자로 받은</strong> iterable 내 Promise 의 rejected 상태와 무관하게 <strong>모든 Promise 의 상태가 settled 가 될 때 까지 기다리며</strong>, fulfilled, rejected 결과를 가지는 Promise 객체를 배열로 반환합니다.</p><h2 id="End-3"><a class="header-anchor" href="#End-3"></a>End</h2><p>Promise 를 잘 알고 있으면 이를 활용한 다양한 비동기 처리 구현 방식을 고민해 볼 수 있어 가독성이 좋고 예외 처리등 효율성이 높은 코드를 작성할 수 있습니다. 사실 평소 자주 사용하던 Promise 인데 then, catch 외 나머지 스펙은 잘 모르다보니 제한적인 코드를 작성하게 되어 명세를 훑어보는 느낌으로 정리해 봤습니다.</p><p>참고로 async, awiat 로 Promise 를 대부분 대체할 수도 있고 대부분의 경우로 가독성 높은 코드 작성이 가능하나 Promise 를 알고 함께 활용하면 더 좋은 코드를 고민할 수 있기 때문에 비동기 처리가 많은 개발자라면 꼭 알아두시길 권장합니다.</p><p>궁금한 점이나 잘 못된 내용이 있으면 피드백 부탁드립니다.<br>읽어주셔서 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>한 컴퓨터에서 SSH 를 이용해 여러개의 Github 계정 사용하기</title>
      <link href="/2020/11/15/multiple-GitHub-accounts-on-a-single-machine-with-SSH-keys/"/>
      <url>/2020/11/15/multiple-GitHub-accounts-on-a-single-machine-with-SSH-keys/</url>
      
        <content type="html"><![CDATA[<p>최근에 블로그를 github page 로 운영하기 위해서 github 계정을 하나 더 만들게 되었습니다. 물론, 하나의 계정으로 여러 github page 를 운용할 수는 있지만 용도를 명확히 하고 싶어서 저장소를 하나 더 만들기로 하였습니다.</p><p>저 처럼 하나의 컴퓨터에서 n개 이상의 github 계정을 사용하는 경우 별도의 설정 없이 ssh-key 생성하여 github 에 등록하면 예상하지 못 한 <code>Permission</code> 에러를 마주하게 됩니다.<br>public key 를 등록 했는데도 말이죠.</p><p>이를 해결하기 위한 방법을 하나씩 알아보도록 하겠습니다.</p><h3 id="Step-Overview"><a class="header-anchor" href="#Step-Overview"></a>Step &amp; Overview</h3><ol><li>github 계정별 ssh-key 생성</li><li>생성된 ssh-key github 에 등록</li><li>ssh config 파일에 설정값 추가</li><li>저장소별 git config 파일 수정</li><li>ssh-agent 에 ssh-key 등록</li><li>connection 테스트</li></ol><!-- 간략하게 요약하면 ssh-key pair 를 생성, public, private key 를 각각 github, ssh config 에 등록하면 됩니다. 1개만 등록할 경우와 다른 부분은 ssh config, git config 를 추가로 작성해 주는 부분인데요 이 부분을 제외하고 1개의 계정만 사용할 경우와 n개 이상을 사용할 경우 동작은 동일합니다. --><p>설명 편의를 위해 <code>account</code>, <code>repository</code> 명을 아래와 같이 명칭하겠습니다.</p><ul><li><strong>Account A</strong><ul><li><strong>account</strong>: user-a</li><li><strong>repository</strong>: <a href="mailto:git@github.com">git@github.com</a>:user-a/repo-a.git</li></ul></li><li><strong>Account B</strong><ul><li><strong>account</strong>: user-b</li><li><strong>repository</strong>: <a href="mailto:git@github.com">git@github.com</a>:user-b/repo-b.git</li></ul></li></ul><h3 id="STEP-1-github-계정별-ssh-key-생성"><a class="header-anchor" href="#STEP-1-github-계정별-ssh-key-생성"></a>STEP 1 - github 계정별 ssh-key 생성</h3><p>ssh 로 github 을 사용하기 위한 ssh-key 를 아래 CLI 를 통해 생성할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh-key 생성</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span> </span><br></pre></td></tr></table></figure><p>참고로 ssh-key 는 <code>./ssh</code> 위치에 생성해야 하며 해당 directory 없다면 직접 생성해 줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .ssh directory 생성</span></span><br><span class="line"><span class="built_in">cd</span> ~/ &amp;&amp; <span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure><p>직접 생성해 봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ &amp;&amp; <span class="built_in">mkdir</span> .ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;user-a@blabla.com&quot;</span></span><br></pre></td></tr></table></figure><p>Account A 계정의 ssh key pair 생성을 위해 메일은 <code>user-a@blabla.com</code> 로 입력해 주었으며, 위 명령어를 실행하면 아래와 같은 화면이 나오게 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generating public/private rsa key pair.</span></span><br><span class="line"><span class="comment"># Enter file in which to save the key (/Users/blabla/.ssh/id_rsa): id_rsa_github_user-a</span></span><br><span class="line"><span class="comment"># Enter passphrase (empty for no passphrase): </span></span><br><span class="line"><span class="comment"># Enter same passphrase again: </span></span><br><span class="line"><span class="comment"># Your identification has been saved in id_rsa_github_user-a.</span></span><br><span class="line"><span class="comment"># Your public key has been saved in id_rsa_github_user-a.pub.</span></span><br><span class="line"><span class="comment"># The key fingerprint is:</span></span><br><span class="line"><span class="comment"># SHA256:abcabcabcabcabcabcabcabcabcabcabcabcabcabc user-a@blabla.com</span></span><br><span class="line"><span class="comment"># The key&#x27;s randomart image is:</span></span><br><span class="line"><span class="comment"># +---[RSA 4096]----+</span></span><br><span class="line"><span class="comment"># |   .o..          |</span></span><br><span class="line"><span class="comment"># |  .  +..         |</span></span><br><span class="line"><span class="comment"># |   . o+.. .      |</span></span><br><span class="line"><span class="comment"># |    +o.o.=       |</span></span><br><span class="line"><span class="comment"># |   +..o+E.o      |</span></span><br><span class="line"><span class="comment"># |  .  oBoB=o      |</span></span><br><span class="line"><span class="comment"># |  o .+oO+@o      |</span></span><br><span class="line"><span class="comment"># | o oo + Ooo      |</span></span><br><span class="line"><span class="comment"># |  .... . o       |</span></span><br><span class="line"><span class="comment"># +----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>위 화면에서 중요한 부분은 <code>Enter file in which to save the key (/Users/blabla/.ssh/id_rsa):</code> 이 부분으로, 구분할 수 있는 ssh-key 명을 입력하고 엔터를 쳐 주시면 됩니다. 실습에서는 <code>id_rsa_github_user-a</code> 로 작성하였습니다. 이후 ssh config 의 IdentityFile 값으로 해당 파일의 경로를 작성하게 됩니다.</p><p>추가로 비밀번호를 입력할 수 있는데 이 부분은 필요하지 않으시면 엔터를 눌러 넘어가 주시면 key 생성이 완료됩니다.</p><p>동일한 방법으로 Account B 를 위한 ssh-key 도 생성한 후 <code>ls</code> 명령어를 통해 확인해 보면 아래와 같이 ssh-key 가 생성된 것을 확인하실 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa_github_user-a        id_rsa_github_user-b</span><br><span class="line">id_rsa_github_user-a.pub    id_rsa_github_user-b.pub</span><br></pre></td></tr></table></figure><p><code>*.pub</code> 확장자가 붙은 파일은 <strong>public key</strong> 이며, 붙지 않은 파일은 <strong>private key</strong> 입니다. <strong>private key</strong> 는 공개되지 않게 잘 관리해야하며, 개인 장비가 아니라면 key 생성시 비밀번호를 입력하는게 좋습니다.</p><h3 id="STEP-2-생성된-ssh-key-github-에-등록"><a class="header-anchor" href="#STEP-2-생성된-ssh-key-github-에-등록"></a>STEP 2 - 생성된 ssh-key github 에 등록</h3><p>이전 STEP 에서 정상적으로 key 가 생성된 것을 확인 하셨다면 github 사이트에 각 계정마다 public key 를 등록해 줘야합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; id_rsa_github_user-a.pub  </span><br></pre></td></tr></table></figure><p>위 명령어를 통해 <code>*.pub</code> 확장자가 붙은 <code>id_rsa_github_user-a.pub</code>, <code>id_rsa_github_user-b.pub</code> 키를 각각 복사하여 해당 github 계정에 에 등록해<br>줍니다.</p><p>ssh-key 등록하는 방법은 <a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account">Adding a new SSH key to your GitHub account</a><br>를 참고해서 진행합니다. 참고로 이미 등록된 key 는 계정이 다르더라도 등록하실 수 없습니다.</p><h3 id="STEP-3-ssh-config-파일에-설정값-추가"><a class="header-anchor" href="#STEP-3-ssh-config-파일에-설정값-추가"></a>STEP 3 - ssh config 파일에 설정값 추가</h3><p>이전 STEP 에서 github 에 public key 등록해 줬으니 이제 사용하는 장비의 ssh config 파일에 private key 를 등록할 차례입니다.</p><!-- ssh 를 통해 각각의 계정의 github 저장소 사용시 해당 계정에 등록한 public key 와 매칭되는 key 가 사용되도록 하기 위해 ssh config 파일을 작성해 줘야합니다. --><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.ssh/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user-a </span></span><br><span class="line">Host github-user-a</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile /Users/blabla/.ssh/id_rsa_github_user-a</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-b </span></span><br><span class="line">Host github-user-b</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile /Users/blabla/.ssh/id_rsa_github_user-b</span><br></pre></td></tr></table></figure><p>위와 같이 ssh config 를 작성해 줍니다. 여기서 <code>Host</code> 에 작성된 값이 중요한데, git config 작성시 remote url 값을 해당 호스트 명으로 작성하지 않으면 Host 를 찾을 수 없다거나 Permission 에러가 발생할 수 있습니다.</p><h3 id="STEP-4-저장소별-git-config-파일-수정"><a class="header-anchor" href="#STEP-4-저장소별-git-config-파일-수정"></a>STEP 4 - 저장소별 git config 파일 수정</h3><p>서로 다른 계정의 github 저장소로 push 를 할 경우 github 에 등록된 public key 와 쌍이되는 private key 가 사용될 수 있도록 설정해 줘야합니다. 이를 위해 이전 STEP 에서 ssh config 에 Host 명과 사용될 private key 를 등록해 주었습니다.</p><p>이번 STEP 에서는 private key 사용을 위해 git config 파일의 remote url 도메인을 ssh 에 등록된 Host 값으로 변경해 줍니다. Host 명을 참조하여 어떤 private key 를 사용할지 결정하기 때문에 ssh config 에 작성한 Host 명과 동일한 이름을 작성해 줘야합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github-user-a:user-a/repo-a.git</span><br></pre></td></tr></table></figure><p>위 처럼 git cli 를 사용해서 값을 변경해 줘도 되지만 여기서는 config 파일을 직접 수정하여 변경해 보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = <span class="literal">true</span></span><br><span class="line">bare = <span class="literal">false</span></span><br><span class="line">logallrefupdates = <span class="literal">true</span></span><br><span class="line">ignorecase = <span class="literal">true</span></span><br><span class="line">precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">url = git@github-user-a:user-a/repo-a.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[user]</span><br><span class="line">email = user-a@blabla.com</span><br><span class="line">name = user-a</span><br><span class="line">[branch <span class="string">&quot;main&quot;</span>]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/main</span><br></pre></td></tr></table></figure><p>등록을 완료하였다면 각 저장소 directory 에서 아래 명령어를 통해 잘 등록되었는지 확인해 봅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>등록한 remote url 이 아래와 같이 출력되되면 정상입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origingit@github-user-a:user-a/repo-a.git (fetch)</span><br><span class="line">origingit@github-user-a:user-a/repo-a.git (push)</span><br></pre></td></tr></table></figure><p>간략하게 지금까지 진행한 내용을 확인해 보면 아래와 같습니다.</p><ol><li>ssh key pair 생성</li><li>github 에 public key 등록</li><li>ssh config 에 Host, ssh key 설정 추가</li><li>git config 에 사용할 Host 등록</li></ol><p>사실 여기까지만 진행해도 해당 포스팅의 목적인 여러개의 github 계정을 사용하실 수 있습니다. 하지만 ssh key 에 비밀번호가 걸려있고 본인만 private 하게 사용하는 장비에서 좀 더 편리하게 사용하고 싶다면 다음 STEP 을 적용해 보시면 됩니다. 더이상 다른 설정은 필요하지 않으시다면 STEP6 로 넘어가시면 됩니다.</p><h3 id="STEP-5-ssh-agent-에-ssh-key-등록"><a class="header-anchor" href="#STEP-5-ssh-agent-에-ssh-key-등록"></a>STEP 5 - ssh-agent 에 ssh-key 등록</h3><p>ssh-agent 를 사용하면 매번 비밀번호를 입력하지 않고도 자유롭게 fetch, push 를 할수 있습니다. 참고로 ssh-agent 가 실행중이라면 한번이라도 push 를 할 경우 자동으로 key 가 등록되며, 사용하려는 key 에 비밀번호가 있는 경우 최초 한번만 아래와 같이 패스워드를 요구합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/entry/personal/blog/cresumerjang.github.io-app(master) » git push</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;/Users/blabla/.ssh/id_rsa_github_user-a&#x27;</span>: </span><br></pre></td></tr></table></figure><p>성공하면 마찬가지로 ssh-agent 에 key 가 등록되어 이후 부터는 비밀번호 입력 없이 사용할 수 있게 됩니다.</p><p>ssh-agent 에 직접 key 등록을 위해 위 명령어를 사용해 ssh agent 를 실행해 줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH 에이전트 백그라운드로 실행 </span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>ssh-add 명령어로 STEP1 에서 생성한 저장소별 각각의 key 를 등록해 줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각기 다른 ssh 키 등록</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa_github_user-a</span><br><span class="line">ssh-add ~/.ssh/id_rsa_github_user-b</span><br></pre></td></tr></table></figure><p><code>-l</code> option 을 사용해 ssh-agent 에 키가 잘 등록 되었는지 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 등록된 키 리스트 확인</span></span><br><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure><p>아래와 같이 등록한 key 들이 출력되면 정상입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4096 SHA256:abcabcabcabcabcabcabcabcabcabcabcabcabcabc user-a@blabla.com (RSA)</span><br><span class="line">4096 SHA256:defdefdefdefdefdefdefdefdefdefdefdefdefdef user-b@blabla.com (RSA)</span><br></pre></td></tr></table></figure><h3 id="STEP-6-connection-테스트"><a class="header-anchor" href="#STEP-6-connection-테스트"></a>STEP 6 - connection 테스트</h3><p>마지막으로 잘 연결 되는지 테스트해 볼 차례입니다.<br>아래 명령어로 연결이 되는지 테스트해 볼 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 연결 테스트</span></span><br><span class="line">ssh -T user@domain</span><br></pre></td></tr></table></figure><p>직접 테스트해 봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/root-repository/.git » ssh -T git@github-user-a</span><br></pre></td></tr></table></figure><p>Account A 경우 ssh config Host 명을 <code>github-user-a</code> 이름으로 등록했기 때문에 위처럼 명령어를 실행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi user-a! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>실행 결과로 위와 같은 내용이 출력되었다면 정상적으로 연결 된 것으로 모든 설정은 끝이 났습니다.<br>서로 다른 계정의 저장소 별로 작업 후 push 해 github 저장소에 정상적으로 반영되는지 확인해 봅니다.</p><h3 id="Errors"><a class="header-anchor" href="#Errors"></a>Errors</h3><p>위 STEP 들을 모두 마치면 정상적으로 n 개의 계정을 이용할 수 있어야 하지만 살다보면 예상하지 못한 경우들이 발생하기 마련입니다.</p><p>아래는 제가 설정하면서 만났던 에러 메시들 입니다. 혹시나 여러 계정으로 push 가 안된다면 아래 동일한 메시지가 있는지 참고하셔서 문제를 해결해 보시면 좋을 것 같습니다.</p><h4 id="Hostname-error"><a class="header-anchor" href="#Hostname-error"></a>Hostname error</h4><p>git remote url 에 등록된 도메인이 ssh config 에 없을 경우 아래와 같은 error message 가 출력 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: Could not resolve hostname github-user-a: nodename nor servname provided, or not known</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>이 경우 STEP3 를 참고하여 ssh config 에 설정을 추가해 줍니다.</p><h4 id="Permission-error"><a class="header-anchor" href="#Permission-error"></a>Permission error</h4><p>STEP6 에서 성공 메시지가 뜨더라도 ssh config Host 명과 git remote url 도메인이 다르면 fetch, push 간 permission 에러 메시지가 뜰 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Permission to user-a/repo-a.git denied to <span class="variable">$&#123;theOtherUser&#125;</span>.</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>혹시 Permission error 를 마주하게 된다면 STEP4 를 참고하여 ssh config Host 명과 git remote url 이 일치 하도록 수정해 줍니다.</p><h3 id="End-4"><a class="header-anchor" href="#End-4"></a>End</h3><p>궁금한 점이나 잘 못된 내용이 있으면 피드백 부탁드립니다.<br>읽어주셔서 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Disqus 댓글 기능 추가하기</title>
      <link href="/2019/11/17/hexo-add-comments/"/>
      <url>/2019/11/17/hexo-add-comments/</url>
      
        <content type="html"><![CDATA[<p>방문자와의 소통을 위해서 블로그의 댓글 기능은 매우 유용하고 필요한 기능입니다. 직접 만들어 쓰려면 손이 꽤 많이가는 기능이기도 하죠.</p><p>예전에 django 로 블로그 만들기를 시도해 봤는데 django 가 워낙 잘 만들어진 웹 프레임워크라 그나마 손 쉽게 작업을 할 수 있었지만 방문자들과의 소통이 목적이라고 한다면 지금 설명드리려는 설치형 댓글 시스템에 비하면 엄청나게 비효율 적인 선택이었다고 생각합니다.</p><p>다행히 설치형 댓글 서비스를 제공해주는 업체들이 있습니다. 많은 서비스중 <strong>Disqus</strong> 라는 댓글 서비스를 hexo 블로그에 적용하는 방법을 소개하려고 합니다. Disqus 경우 hexo 의 설정 파일을 통해 손쉽게 적용할 수 있지만 <strong>아쉽게도 hexo 설정 파일이 아닌 theme 의 설정 파일</strong>을 수정해 줘야 합니다.</p><p>제가 사용중인 <strong>clean-blog</strong> 테마의 경우 <a href="https://github.com/klugjo/hexo-theme-clean-blog/blob/master/layout/_partial/comments.ejs">comments.ejs</a> 파일에 disqus, facebook 댓글 관련 코드가 작성되어 있는 것을 볼 수 있는데, 이것은 theme 마다 설정 방법이 다를 수 있음을 의미합니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(page.comments &amp;&amp; theme.comments &amp;&amp; theme.comments.disqus_shortname)&#123; %&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h3&gt;&lt;%- <span class="title function_ invoke__">__</span>(<span class="string">&#x27;comment&#x27;</span>)%&gt;:&lt;/h3&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;disqus_thread&quot;</span>&gt;</span><br><span class="line">        &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=<span class="string">&quot;//disqus.com/?ref_noscript&quot;</span>&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span>(page.comments &amp;&amp; theme.comments &amp;&amp; theme.comments.facebook &amp;&amp; theme.comments.facebook.appid) &#123; %&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;h3&gt;&lt;%- <span class="title function_ invoke__">__</span>(<span class="string">&#x27;comment&#x27;</span>)%&gt;:&lt;/h3&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;fb-root&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">d, s, id</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> js, fjs = d.<span class="title function_ invoke__">getElementsByTagName</span>(s)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (d.<span class="title function_ invoke__">getElementById</span>(id)) <span class="keyword">return</span>;</span><br><span class="line">            js = d.<span class="title function_ invoke__">createElement</span>(s); js.id = id;</span><br><span class="line">            js.src = <span class="string">&quot;//connect.facebook.net/en_US/all.js#xfbml=1&amp;appId=&lt;%= theme.comments.facebook.appid %&gt;&quot;</span>;</span><br><span class="line">            fjs.parentNode.<span class="title function_ invoke__">insertBefore</span>(js, fjs);</span><br><span class="line">        &#125;(document, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;facebook-jssdk&#x27;</span>));</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">fb</span>-<span class="title">comments</span>&quot; <span class="title">data</span>-<span class="title">href</span>=&quot;&lt;%= <span class="title">url</span> %&gt;&quot; <span class="title">data</span>-<span class="title">num</span>-<span class="title">posts</span>=&quot;&lt;%= <span class="title">theme</span>.<span class="title">comments</span>.<span class="title">facebook</span>.<span class="title">comment_count</span> %&gt;&quot; <span class="title">data</span>-<span class="title">width</span>=&quot;100%&quot; <span class="title">data</span>-<span class="title">colorscheme</span>=&quot;&lt;%= <span class="title">theme</span>.<span class="title">comments</span>.<span class="title">facebook</span>.<span class="title">comment_colorscheme</span> %&gt;&quot;&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>처음 사용하는 theme 경우 앞서 언급한 <a href="https://github.com/klugjo/hexo-theme-clean-blog/blob/master/layout/_partial/comments.ejs">comments.ejs</a> 와 같은 파일을 통해 어떤 댓글 서비스를 지원하는지 파악하기가 쉽지 않습니다. 그럼 내가 선택한 theme 가 어떤 댓글 서비스를 지원하는지는 어떻게 알 수 있을까요?</p><h2 id="Theme-Disqus-support"><a class="header-anchor" href="#Theme-Disqus-support"></a>Theme Disqus support</h2><p>내가 선택한 theme 가 어떤 댓글 서비스를 지원하는지 확인하는 가장 좋은 방법은 theme 의 저장소를 방문하는 것 입니다. 보통 잘 만들어진 테마 경우 저장소에 주요 기능에 대한 설명이 상세히 작성된 파일을 가지고 있습니다.</p><p>제가 사용중인 <a href="https://github.com/klugjo/hexo-theme-clean-blog">clean-blog</a> theme 의 경우 역시 <a href="https://github.com/klugjo/hexo-theme-clean-blog/blob/master/README.md">README.md</a> 에 지원하는 기능에 대해 상세히 기술하고 있으며 <a href="https://github.com/klugjo/hexo-theme-clean-blog#comments">comments</a> 섹션 에서 <code>Disqus</code>, <code>Facebook</code> 의 댓글 지원에 대한 설명을 확인할 수 있습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comments. Choose one by filling up the information</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Disqus comments</span></span><br><span class="line">  <span class="attr">disqus_shortname:</span> <span class="string">klugjotest</span></span><br><span class="line">  <span class="comment"># Facebook comments</span></span><br><span class="line">  <span class="attr">facebook:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="number">123456789012345</span></span><br><span class="line">    <span class="attr">comment_count:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">comment_colorscheme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p>위와 같은 방법을 사용하면 저와 다른 theme 를 사용하시더라도 해당 theme 에서 지원하는 댓글 서비스 확인에 도움이 되지 않을까 싶습니다.</p><p>저는 Disqus 를 사용할 것이기 때문에 Facebook 관련 설정은 주석처리 합니다. 이제 <code>disqus_shortname</code> 에 값만 넣어주면 댓글을 사용할 수 있을 것 같은데요. 해당 값은 어디서 알 수 있을까요?</p><h2 id="Disqus-settings"><a class="header-anchor" href="#Disqus-settings"></a>Disqus settings</h2><p><code>disqus_shortname</code> 값은 <a href="https://disqus.com">Disqus</a> 에서 확인할 수 있습니다. 아이디가 없으신 분들은 먼저 회원 가입을 하시고 아래 순서대로 진행합니다.</p><ul><li><p>회원 가입 후 메인 화면의 <strong><a href="https://disqus.com/profile/signup/intent/">GET STARTED</a></strong> 버튼을 클릭합니다.</p><p><img src="disqus-step-1.png" alt="disqus"></p></li><li><p>아래 보이는 GET STARTED 페이지에서 <strong>I want to install Disqus on my site</strong> 를 <a href="https://disqus.com/admin/create/">클릭</a>합니다.</p><p><img src="disqus-step-2.png" alt="disqus"></p></li><li><p>아래 이미지와 같은 <strong>Create a new site</strong> 화면을 볼 수 있습니다.<br><strong>Website Name</strong> 란을 작성하셔서 아래에 Your unique disqus url will be : <code>test-0pisjqhoqo.disqus.com</code> 와 같은 URL 이 표시됨을 확인합니다. 나머지 <strong>category</strong>, <strong>language</strong> 값 선택 후 <strong>Create Site</strong> 버튼을 클릭합니다.</p><p><img src="disqus-step-3.png" alt="disqus"></p></li><li><p>plan 선택 페이지가 나오는데 저는 <strong>무료</strong> 사용을 위해 <code>Basic</code> 을 선택했습니다.</p><p><img src="disqus-step-4.png" alt="disqus"></p></li><li><p>다음으로 댓글을 붙일 웹 사이트의 <strong>platform</strong> 을 선택해야 합니다. 아쉽게도 저희가 사용하는 hexo 는 보이지 않기 때문에 코드를 직접 삽입하기 위해 가장 아래에 있는 <strong>I don’t see my platform listed, install manually with Universal Code</strong> 를 선택합니다.<br><code>clean-blog 경우 theme 에서 Disqus 설정을 지원하기 때문에 코드를 직접 삽입하지는 않습니다.</code></p><p><img src="disqus-step-5.png" alt="disqus"></p></li><li><p>코드를 직접 삽입하는 방법을 가이드하는 페이지가 나옵니다. 가이드가 생각보다 친절하기 때문에 지원하는 platform 에 없다고 실망하시지 않으셔도 됩니다. 가이드는 <strong>댓글을 사용을 위한 코드 삽입(<a href="https://www.youtube.com/watch?v=Dr6pSdeJgkA">Youtube</a>)</strong>, <strong>댓글 노출을 위한 코드 삽입(<a href="https://www.youtube.com/watch?v=EalamXPZFeY">Youtube</a>)</strong> 두가지를 설명해 줍니다.<br>저희는 직접 코드를 삽입하지 않기 때문에 아래 <strong>Configure</strong> 버튼을 클릭해 줍니다.</p><p><img src="disqus-step-6.png" alt="disqus"></p></li><li><p>설정 페이지가 나옵니다. Website URL 및 필요한 설정을 완료 후 <strong>Complete Setup</strong> 버튼을 클릭합니다.</p><p><img src="disqus-step-7.png" alt="disqus"></p></li><li><p>설정이 완료되면 아래와 같은 화면이 나오며 Disqus 설치 완료 후 할 일에대해 안내(<a href="https://www.youtube.com/watch?v=wTRsNa8kzTw&amp;t=111s">6 Things To Do After Installing Disqus</a>)해 줍니다. 저희는 <code>disqus_shortname</code> 값 확인을 위해 화면 가운데 위치한 <strong>Configure your site’s community settings</strong> 버튼을 클릭합니다.</p><p><img src="disqus-step-8.png" alt="disqus"></p></li><li><p>Configure Disqus for your site 페이지로 이동합니다. 설정 페이지에서 <strong>Shortname</strong> 을 확인할 수 있습니다. 해당 값을 복사하여 clean-blog 테마의 <code>disqus_shortname</code> 값으로 넣어줍니다. 해당 페이지에서 추가로 설정할 부분이 있으면 설정하고 <strong>Save</strong> 버튼을 누르면 끝 입니다.</p><p><img src="disqus-step-9.png" alt="disqus"></p></li><li><p>hexo 서버를 다시 실행하고 post 페이지로 가보면 아래와 같이 Disqus 댓글 UI 가 노출되는 것을 확인하실 수 있습니다.</p><p><img src="disqus-step-10.png" alt="disqus"></p></li></ul><p>절차가 조금 복잡하긴 하지만 생각보다 쉽게 댓글 기능을 추하였습니다. 이제 블로그 방문자들과 소통할 일만 남았습니다. 좋은 컨텐츠를 제공하고 방문자들과 함께 컨텐츠를 소비하고 소통하는 일은 사소하지만 생각보다 즐겁고 새로운 경험을 제공해 줍니다.</p><p>아직 댓글 기능을 달지 않은 분들은 꼭 한번 달아보시길 바라며 궁금한 점 있으시면 댓글 남겨주시면 감사하겠습니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hex </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>웹 브라우저는 렌더링 프로세스</title>
      <link href="/2019/06/24/critical-rendering-path/"/>
      <url>/2019/06/24/critical-rendering-path/</url>
      
        <content type="html"><![CDATA[<!-- # 성능 최적화 Part 1 - 브라우저 렌더링 방식 이해하기 --><p>웹의 초창기에는 마크업 문서 작성시 <code>&lt;body&gt;</code> 태그를 빼 먹거나, 닫아야 하는 태그를 닫지 않으면 브라우저가 HTML 을 제대로 파싱하지 못하였습니다. 때문에 종종 화면에 깨진 UI 가 표시되기도 하였습니다. 하지만 오늘 날 대부분의 모던 브라우저는 예외 처리가 아주 잘 되어 있어 대부분의 좋지 못한 경우에도 예상한 <code>DOM Tree</code> 를 만들어 줍니다. 오히려 예전보다 덜 신경쓰며 작업 해도 브라우저가 예상한 화면으로 잘 렌더링 해주는거죠.</p><p>이처럼 브라우저의 성능이 점점 향상되고 스마트해 짐에 따라 렌더링 방법을 이해하지 않고 작업해도 대부분의 웹 페이지와 애플리케이션은 잘 동작합니다. 그런데도 우리는 <strong>왜</strong> 브라우저의 렌더링 프로세스에 대해 알고 있어야 할까요?</p><p>사용자가 웹 페이지를 이탈하지 않고 서비스에 더 오래 머물게 하는 중요한 요소중 하나인 <strong>웹 애플리케이션 응답 속도</strong> 때문입니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/progressive-rendering.png" alt=""></p><p>속도 개선을 위한 성능 최적화 작업은 <code>Backend</code>, <code>Frontend</code> 모든 영역에서 작업 되어야 하지만 드라마틱한 개선을 위해서는 브라우저 렌더링 최적화가 반드시 고려되어야 합니다.</p><p><code>Critical Rendering Path</code> 라는 <strong>브라우저 렌더링 과정</strong>을 이해하고 각 단계에서 어떤 일이 일어나는지 파악할 수 있어야 <strong>브라우저 렌더링 최적화</strong>를 통한 어플리케이션의 <strong>응답 속도를 개선</strong>할 수 있기 때문에 브라우저 렌더링 과정에 대해 이해하는 것은 생각보다 중요합니다.</p><h2 id="How-does-web-browser-work"><a class="header-anchor" href="#How-does-web-browser-work"></a>How does web browser work?</h2><p>아래 이미지는 웹 브라우저가 서버로 요청을 보내고 응답 받아 화면을 그리는 일련의 과정으로 <code>Backend Time</code>, <code>Frontend Time</code> 으로 구분하여 웹 브라우저가 어떻게 화면을 표시하는지 보여주고 있습니다.</p><p><img src="./process_model.png" alt=""></p><blockquote><p>이번 포스트에는 브라우저의 렌더링 방식에 대해서 알아보기 위한 포스트로 <code>Frontend Time</code> 을 중점적으로 다룹니다.</p></blockquote><ul><li><strong>Backend Time</strong><ul><li>렌더링 준비 단계로 HTML 및 기타 <strong>Resources</strong> 를 <strong>수신</strong>합니다.</li></ul></li><li><strong>Frontend Time</strong><ul><li>렌더링 실행 단계로 <strong>Render Tree</strong> 를 생성하고 <strong>Layout</strong> 및 <strong>Paint</strong> 를 시도합니다.</li></ul></li></ul><p>간략하게 웹 브라우저가 동작하는 과정을 살펴봤습니다. 이제 <code>Frontend Time</code> 에서 일어나는 렌더링 과정에 대해 알아보도록 하겠습니다.</p><h2 id="Critical-Rendering-Path"><a class="header-anchor" href="#Critical-Rendering-Path"></a>Critical Rendering Path</h2><p>웹 브라우저의 렌더링 과정을 <strong>Critical Rendering Path(CRP)</strong> 라고 하며 아래 이미지와 같은 과정을 거쳐 그래픽 요소를 화면에 그리게 됩니다.</p><p><img src="./oldBrowserRenderFlow.png" alt=""></p><p>CRP 각 과정에서 처리되는 내용을 간략하게 살펴보면 아래와 같습니다.</p><ol><li>HTML 마크업을 처리하고 DOM 트리를 빌드합니다.<ul><li><strong>Parse HTML</strong></li><li><strong>Build DOM Tree</strong></li></ul></li><li>CSS 마크업을 처리하고 CSSOM 트리를 빌드합니다.<ul><li><strong>Parse Stylesheet</strong></li><li><strong>Build CSSOM Tree</strong></li></ul></li><li>DOM 및 CSSOM을 결합하여 렌더링 트리를 형성합니다.<ul><li><strong>Calculate Style</strong></li><li><strong>Build Render Tree</strong> (DOM + CSSOM)</li></ul></li><li>렌더링 트리에서 레이아웃을 실행하여 각 노드의 기하학적 형태를 계산합니다.<ul><li><strong>Layout</strong></li><li><strong>Update Layer Tree</strong></li></ul></li><li>개별 노드를 화면에 페인트합니다.<ul><li><strong>Paint</strong></li><li><strong>Raster</strong></li><li><strong>Composit Layer</strong></li></ul></li></ol><p>페이지 초기 렌더링 이후 UI의 상태가 변경되어도 위 프로세스의 <strong>전체</strong> 혹은 <strong>일부</strong>를 거쳐 화면이 그려지게 됩니다. 따라서 <strong>Critical Rendering Path</strong> 를 최적화(1단계~5단계를 수행할 때 걸린 총 시간 최소화) 하면 초기 컨텐츠를 화면에 빠르게 렌더링할 수 있을 뿐만 아니라 초기 렌더링 후 화면 업데이트 시간도 줄일 수 있습니다.</p><p><strong>Critical Rendering Path</strong> 의 각 프로세스에 대해 좀 더 자세히 알아보겠습니다.</p><h3 id="Build-DOM-Tree"><a class="header-anchor" href="#Build-DOM-Tree"></a>Build DOM Tree</h3><p><strong>Document Object Model</strong> 은 브라우저가 웹 페이지를 잘 핸들링 하기 위해 필요한 객체입니다. 브라우저는 수신받은 HTML 을 가지고 <strong>Bytes &gt; Characters &gt; Tokens &gt; Nodes &gt; DOM</strong> 의 과정을 거쳐 DOM Tree 를 만듭니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/full-process.png" alt=""></p><ol><li><strong>변환</strong> (Bytes -&gt; Characters)<ul><li>브라우저가 HTML의 원시 바이트를 디스크나 네트워크에서 읽어와서, 해당 파일에 대해 지정된 인코딩(예: UTF-8)에 따라 개별 문자로 변환합니다.</li></ul></li><li><strong>토큰화</strong> (Character -&gt; Tokens)<ul><li>브라우저가 문자열을 W3C HTML5 표준에 지정된 고유 토큰으로 변환합니다(예: <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code> 및 꺽쇠괄호로 묶인 기타 문자열). 각 토큰은 특별한 의미와 고유한 규칙을 가집니다.</li></ul></li><li><strong>렉싱</strong> (Tokens -&gt; Nodes)<ul><li>방출된 토큰은 해당 속성 및 규칙을 정의하는 '객체’로 변환됩니다.</li></ul></li><li><strong>DOM 생성</strong> (Nodes -&gt; DOM)<ul><li>마지막으로, HTML 마크업이 여러 태그(일부 태그는 다른 태그 안에 포함되어 있음) 간의 관계를 정의하기 때문에 생성된 객체는 트리 데이터 구조 내에 연결됩니다. 이 트리 데이터 구조에는 원래 마크업에 정의된 상위-하위 관계도 포합됩니다. 즉, HTML 객체는 body 객체의 상위이고, body 는 paragraph 객체의 상위인 식입니다.</li></ul></li></ol><h3 id="Build-CSSOM-Tree"><a class="header-anchor" href="#Build-CSSOM-Tree"></a>Build CSSOM Tree</h3><p>수신된 CSS 규칙을 브라우저가 이해하고 처리할 수 있는 형식으로 변환하기 HTML 과 동일한 프로세스(<strong>Bytes &gt; Characters &gt; Tokens &gt; Nodes &gt; CSSOM</strong>)가 적용됩니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/cssom-construction.png" alt=""></p><h3 id="Build-Render-Tree"><a class="header-anchor" href="#Build-Render-Tree"></a>Build Render Tree</h3><p><strong>DOM</strong> 은 컨텐츠, <strong>CSSOM</strong> 은 스타일 규칙을 설명하는 독립적인 객체입니다. 각각의 객체를 가지고 <strong>화면에 픽셀을 찍기위해</strong>서는 두 객체를 합쳐 <strong>Render Tree</strong> 를 만들어야 합니다.<br>웹 브라우저는 아래 과정을 거쳐 DOM, CSSOM 을 Render Tree 로 만듭니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png" alt=""></p><ol><li><strong>DOM 트리의 루트에서 시작하여 표시되는 노드 각각을 트래버스합니다.</strong><ul><li>일부 노드는 표시되지 않으며(예: 스크립트 태그, 메타 태그, display none 속성을 가진 요소 등), 렌더링된 출력에 반영되지 않으므로 Render Tree 에서는 생략됩니다.</li><li>필요에 따라 1개 이상의 <strong>Layer</strong> 가 만들어집니다.</li><li>Layer 중간에 GPU 처리가 필요하면 <strong>Graphic Layer</strong> 가 만들어집니다.</li></ul></li><li><strong>표시된 각 노드에 대해 적절하게 일치하는 CSSOM 규칙을 찾아 적용합니다.</strong></li><li><strong>표시된 노드를 콘텐츠 및 계산된 스타일과 함께 내보냅니다.</strong></li></ol><p>해당 프로세스의 최종 출력은 화면에 표시되는 모든 노드의 콘텐츠 및 스타일 정보를 모두 포함하는 Render Tree 입니다. Render Tree 가 생성되면 <strong>‘Layout’</strong> 단계를 진행합니다.</p><h3 id="Layout-Reflow"><a class="header-anchor" href="#Layout-Reflow"></a>Layout (Reflow)</h3><p>Render Tree 에는 노드와 노드의 스타일만 계산되어 있습니다. Layout 에서는 화면에 표시될 노드의 정확한 위치 및 크기를 계산합니다.</p><p>페이지에서 각 객체의 정확한 크기와 위치를 파악하기 위해 브라우저는 Render Tree 루트에서 부터 Render Tree 를 탐색하며 각 노드의 Box Type 을 확인합니다. Type이  Block 이면 세로로 Inline 이면 가로로 Box의 위치를 계산합니다.</p><p><img src="http://blog.4psa.com/wp-content/uploads/block-inline1.png" alt=""></p><p>최종 output 위와 같은 <strong>box model</strong> 로 각 Box 들의 크기 위치 높이를 가지게 됩니다.</p><p><img src="http://blog.4psa.com/wp-content/uploads/3.png" alt=""></p><p>이로써 노드와 계산된 스타일 그리고 화면 내에서 각 노드의 정확한 위치를 얻게됩니다.<br>Layout 과정이 완료되면 브라우저가 Paint 이벤트를 발생시켜 노드를 픽셀로 변화하는 <strong>‘Paint’</strong> 단계가 실행됩니다.</p><h3 id="Paint-Rasterize-Composite-Layer-Repaint"><a class="header-anchor" href="#Paint-Rasterize-Composite-Layer-Repaint"></a>Paint, Rasterize, Composite Layer (Repaint)</h3><p>Layout 과정을 거쳐 화면에 UI를 화면에 표현하기 위한 계산이 끝나면 Paint 과정을 거칩니다. Layout 과정에서 Render Layer가 2개 이상 생성되면 각각의 Layer 를 Painting 한 뒤 하나의 이미지로 Composite하는 과정을 추가로 거쳐 브라우저에 표현합니다.</p><p><img src="./pipeLine.png" alt=""></p><ul><li><strong>Paint / Rasterize</strong><ul><li>Paint 는 Render Tree 를 화면의 픽셀로 변환하는 프로세스입니다. 이는 텍스트, 색, 이미지, 경계 및 그림자 등 요소의 모든 시각적 부분을 그리는 작업을 포함합니다.<br>그리기는 일반적으로 레이어라고 하는 다수의 표면에서 수행됩니다. 흔히 painting 또는 rasterizing 라고 하며 실제로 픽셀을 채우는 작업은 rasterize 라고 하며 paint 는 그릴 호출 목록을 생성합니다.</li></ul></li><li><strong>Composite</strong><ul><li>사용된 HTML이나 CSS 속성에 따라 여러개의 Layer 가 생성된 경우, 생성된 Layer 들을 합성하여 한장의 bitmap 으로 만드는 과정입니다. 각 Layer 별로 paint 되기 때문에 불필요한 painting 을 줄여 효율 적으로 그릴 수 있습니다.</li></ul></li></ul><blockquote><p><strong>‘<a href="http://mozilla.org">mozilla.org</a>’ Rendering Visualization</strong><br>영상을 통해 Render Tree 생성 이후 Layout, Paint(Rasterize), Composite Layer 과정을 시각적으로 확인해 볼 수 있습니다.</p></blockquote><iframe style="width:100%; min-height:300px;" src="https://www.youtube.com/embed/ZTnIxIA5KGw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Update-UI"><a class="header-anchor" href="#Update-UI"></a>Update UI</h2><p>자바스크립트, CSS 또는 웹 애니메이션을 사용하여 시각적 변경을 수행할 때 주어진 프레임에 대해 아래의 프로세스 전체 또는 일부를 거쳐 화면이 업데이트 됩니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-full.jpg" alt=""></p><ul><li><strong>자바스크립트</strong><ul><li>일반적으로 자바스크립트는 jQuery의 animate 함수, 데이터 집합 정렬 또는 페이지에 DOM 요소 추가 등 시각적 변화를 일으키는 작업을 처리하는 데 사용됩니다. 하지만 반드시 자바스크립트로 시각적 변화를 트리거할 필요는 없습니다. CSS Animations, Transitions 및 Web Animations API도 널리 사용됩니다.</li></ul></li><li><strong>스타일 계산</strong><ul><li>이는 .headline 또는 .nav &gt; .nav__item 등의 매칭 선택기에 따라 어떤 CSS 규칙을 어떤 요소에 적용할지 계산하는 프로세스입니다. 여기에서 규칙이 알려지면 적용되고 각 요소의 마지막 스타일이 계산됩니다.</li></ul></li><li><strong>레이아웃</strong><ul><li>브라우저가 요소에 어떤 규칙을 적용할지 알게 되면 화면에서 얼마의 공간을 차지하고 어디에 배치되는지 계산하기 시작할 수 있습니다. 웹의 레이아웃 모델은 한 요소가 다른 요소에 영향을 줄 수 있음을 의미합니다. 예를 들어, <body> 요소의 너비는 일반적으로 하위 요소의 너비 등 트리의 위아래 모든 곳에 영향을 주며, 따라서 이 프로세스는 브라우저에 상당한 영향을 줄 수 있습니다.</li></ul></li><li><strong>페인트</strong><ul><li>페인트는 픽셀을 채우는 프로세스입니다. 이는 텍스트, 색, 이미지, 경계 및 그림자 등 요소의 모든 시각적 부분을 그리는 작업을 포함합니다. 그리기는 일반적으로 레이어라고 하는 다수의 표면에서 수행됩니다.</li></ul></li><li><strong>합성(Compositing)</strong><ul><li>페이지의 여러 부분이 잠재적으로 여러 레이어로 그려졌기 때문에 페이지가 정확히 렌더링되려면 정확한 순서로 화면에 그려야 합니다. 실수로 한 요소가 다른 요소 위에 잘못 나타날 수 있기 때문에 이는 다른 요소와 겹치는 요소가 있는 경우에 특히 중요합니다.</li></ul></li></ul><p><strong>시각적 변경이 발생할 경우 처리 방법에 따라 아래 3가지 프로세스를 타게 됩니다.</strong></p><blockquote><p>주어진 CSS 속성을 변경하는 아래 세 가지 경우 중 어느 버전이 트리거될지 알고 싶은 경우 <a href="http://csstriggers.com">csstriggers.com</a> 을 통해 어떤 속성 어떤 과정에 영향을 주는지 알 수 있습니다.</p></blockquote><ul><li><p><strong>JS / CSS &gt; 스타일 &gt; 레이아웃 &gt; 페인트 &gt; 합성</strong><br><img src="https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-full.jpg" alt=""><br>레이아웃 너비, 높이, 왼쪽 또는 상단 위치 등 요소의 기하학적 형태에 영향을 주는 ‘layout’ 속성을 변경하면 브라우저가 다른 모든 요소를 확인하고 페이지에 대해 '리플로우’를 수행해야 합니다. 영향을 받은 영역이 있으면 다시 페인트해야 하고 최종적으로 페인트한 요소는 다시 합성해야 합니다.<br><br/></p></li><li><p><strong>JS / CSS &gt; 스타일 &gt; 페인트 &gt; 합성</strong><br><img src="https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-no-layout.jpg" alt=""><br>페이지의 레이아웃에 영향을 주지 않는 배경 이미지, 텍스트 색상 또는 그림자 등의 ‘paint only’ 속성을 변경하면, 브라우저가 레이아웃을 건너뛰되 페인트 작업은 여전히 수행합니다.<br><br/></p></li><li><p><strong>JS / CSS &gt; 스타일 &gt; 합성</strong><br><img src="https://developers.google.com/web/fundamentals/performance/rendering/images/intro/frame-no-layout-paint.jpg" alt=""><br>레이아웃과 페인트가 필요 없는 속성을 변경하면 브라우저가 합성 단계로 건너뜁니다.<br>이 최종 버전은 앱의 수명 주기에서 애니메이션이나 스크롤처럼 많은 부담을 주는 시점에 가장 이상적이고 비용이 가장 적게 드는 버전입니다.</p></li></ul><h2 id="TIP"><a class="header-anchor" href="#TIP"></a>TIP</h2><p>앞에서 <code>Critical Rendering Path</code> 살펴 보았습니다. 지금부터는 웹 브라우저 렌더링 최적화에 도움이 되는 몇가지 팁을 알아보도록 하겠습니다.</p><ul><li><h3 id="Navigation-Timing-API"><a class="header-anchor" href="#Navigation-Timing-API"></a>Navigation Timing API</h3><p><a href="https://developer.mozilla.org/ko/docs/Navigation_timing">Navigation Timing API</a> 를 사용하면 <code>Frontend Time</code> 의 내부 렌더링 프로세스를 들여다 볼 수 있습니다. 렌더링 프로세스를 추적하고 개선점을 찾고 싶다면 해당 <strong>Navigation Timing API</strong> 를 사용해 볼 수 있습니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/dom-navtiming.png" alt=""></p><p>위 이미지는 <strong>Navigation Timing API</strong> 을 통해 확인할 수 있는 <code>Frontend Time</code> 의 각 단계를 나타내는 이미지로 각 라벨이 가지는 의미는 아래와 같습니다.</p><ul><li><strong>Processing</strong><ul><li><strong>domLoading</strong><ul><li>브라우저가 처음 수신한 HTML 문서 바이트의 <strong>파싱을 시작하려고 하는 상태</strong>입니다.</li></ul></li><li><strong>domInteractive</strong><ul><li>브라우저가 파싱을 완료한 시점 즉, <strong>DOM이 준비된 상태</strong>입니다.</li><li>파서 차단 자바스크립트가 없으면 domInteractive 직후에 DOMContentLoaded 이벤트가 발생할 것입니다.</li></ul></li><li><strong>domContentLoaded</strong><ul><li>DOM이 준비되고 자바스크립트 실행을 차단하는 스타일시트가 없는 상태입니다. 즉, <strong>DOM 및 CSSOM이 모두 준비된 상태</strong>로 <strong>렌더링 트리를 생성</strong>할 수 있습니다.</li><li>많은 자바스크립트 프레임워크가 자체 로직을 실행하기 전에 이 이벤트를 기다립니다.</li></ul></li><li><strong>domComplete</strong><ul><li>페이지 및 해당 하위의 <strong>모든 리소스가 준비된 상태</strong>입니다.</li><li>이름이 의미하는 바와 같이, 모든 처리가 완료되고 페이지의 모든 리소스(이미지 등) 다운로드가 완료되었습니다( 예: 로딩 스피너가 회전을 멈춤).</li></ul></li></ul></li><li><strong>Load</strong><ul><li><strong>loadEvent</strong><ul><li>각 페이지 로드의 최종 단계로, 브라우저가 추가 <strong>애플리케이션 로직을 트리거할 수 있는 상태</strong>로 onload 이벤트를 발생시킵니다.</li></ul></li></ul></li></ul></li><li><h3 id="Parser-Render-Blocking-Point-Check"><a class="header-anchor" href="#Parser-Render-Blocking-Point-Check"></a>Parser / Render Blocking Point Check</h3><p>파싱, 렌더링이 차단되는 지점을 확인합니다.</p><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/analysis-dom-css-js.png" alt=""></p><ul><li>Javascript 를 명시적으로 비동기로 호출하지 않은 경우 DOM 생성을 차단합니다.</li><li>HTML 문서 내 Inline 으로 작성된 Javascript 를 찾게되면 DOM 생성을 차단합니다.</li><li>Parsing 중 CSS 를 만나면 DOM 생성을 차단하고 CSS 파일을 읽어 CSSOM 을 만듭니다.</li></ul></li><li><h3 id="Layer-활용하기"><a class="header-anchor" href="#Layer-활용하기"></a>Layer 활용하기</h3><p>렌더링시 Painting, Rasterizing 할 대상 영역을 나누어 놓은 것을 Layer 라고 합니다.<br>Layer 를 사용하면 reflow 발생 시 global layouting 이 아닌 incremental layouting 을 발생시킬 수 있기 때문에 효율적으로 화면을 그릴 수 있습니다.</p><ul><li><strong>Layer 생성 조건</strong><ul><li>position 관련 속성</li><li>overflow, alpha 값</li><li>css filter</li><li>3D transform, animation</li><li><code>&lt;canvas&gt;</code>, <code>&lt;video&gt;</code></li><li>scrollbar가 존재하는 경우 별도의 layer 생성하여 처리</li><li>같은 z-index의 레이어가 겹치는 경우 별도의 layer 생성하여 처리</li></ul></li><li><strong>Graphic Layer 생성 조건</strong><ul><li>css 3d transform이나 perspective 속성 사용 경우</li><li>css animation 함수나 필터 함수 사용 경우</li><li>video, canvas 사용 경우</li><li>자식 요소가 레이어로(UI) 사용된 경우</li><li>z-index가 낮은 형제 요소가 레이어로 사용된 경우</li></ul></li></ul></li></ul><h2 id="마무리"><a class="header-anchor" href="#마무리"></a>마무리</h2><p>지금까지 웹 브라우저 렌더링 과정에 대해 알아봤습니다. 사실 UI 렌더링은 웹 브라우저가 잘 처리해 주고 있기 때문에 많은 프론트 개발자 분들이 등한시 할 수 있는 부분 이기도 합니다. 하지만 앞에서 살펴보았듯이 생각보다 중요한 부분이기 때문에 알아두면 좋을 것 같습니다.</p><p>잘 못된 내용이나 개선점이 있으면 피드백을 남겨주시면 반영하도록 하겠습니다.<br>읽어주셔서 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web browser rendering </tag>
            
            <tag> critial rendering path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>알고 쓰자 Javascript Prototype</title>
      <link href="/2019/06/20/javascript-prototype/"/>
      <url>/2019/06/20/javascript-prototype/</url>
      
        <content type="html"><![CDATA[<p>거창한 부재만큼 자바스크립트를 얘기하면서 프로토타입을 빼놓을 순 없습니다. 그만큼 중요한 개념이고 자바스크립트를 제대로 그리고 재밋게 사용하려면 꼭 알아야 하는 개념중에 하나이기 때문입니다. 이번 포스트에서 <code>prototype</code> 이 <strong>무엇</strong>인지, <strong>언제</strong> 쓰이는지 그리고 프로토타입기반 언어인 자바스크립트에서 프로토타입을 이용한 <strong>상속</strong>은 어떻게 구현 하는지까지 알아보겠습니다.</p><p>프로토타입이 무엇인지 이해하기 위해서는 먼저 <code>prototype object</code> 와 <code>prototype link</code>에 대한 개념을 알아야 합니다. 프로토타입 객체부터 하나씩 알아보도록 하겠습니다.</p><h2 id="프로토타입-객체"><a class="header-anchor" href="#프로토타입-객체"></a>프로토타입 객체</h2><p><code>prototype object</code> 는 자바스크립트에서 함수 선언시 생성되는 객체로 <code>constructor</code> 와 <code>__proto__</code> 를 기본 속성으로 가지는, 모든 함수가 가지고 있는 객체입니다. 기본 속성은 아래와 같은 속성값을 가집니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">constructor</span>: ƒ (), <span class="comment">// 생성자 함수 즉, `prototype object` 가 속한 함수를 참조합니다.</span></span><br><span class="line">    <span class="attr">__proto__</span>: <span class="title class_">Object</span> <span class="comment">// 생성자 함수의 `prototype object` 를 참조합니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>선언된 함수는 <code>prototype</code> 이라는 속성을 통해 생성된 <code>prototype object</code> 에 접근할 수 있으며 객체에 원하는 멤버를 추가, 삭제할 수 있습니다. 뒤에서 언급하겠지만 <code>prototype object</code> 에 추가된 멤버는 인스턴스 생서시 매번 인스턴스 멤버로 메모리에 올라가는 것이 아니라 프로토타입의 멤버로 하나의 참조값을 공유하는 특징을 가집니다.</p><h2 id="프로토타입-링크"><a class="header-anchor" href="#프로토타입-링크"></a>프로토타입 링크</h2><p><code>prototype link</code> 자바스크립트 내부 속성인 <code>[[prototpye]]</code> 을 참조할 수 있도록 웹 브라우저 벤더사가 뚫어 놓은 <code>__proto__</code> 라는 속성을 통해 접근할 수 있습니다. 함수만 가지는 <code>prototype</code> 속성과 달리 모든 객체가 가지고 있는 속성으로 <strong>생성자 함수</strong>의 <code>prototype object</code> 를 참조합니다.</p><blockquote><p><code>__proto__</code> 속성은 표준 스펙이 아니기 때문에 개발시 사용하지 않도록 하며, ECMAScript 2015 를 사용 가능한 환경에서는 <a href="https://www.ecma-international.org/ecma-262/6.0/#sec-object.getprototypeof">Object.getPrototypeOf</a> 로 <code>prototype object</code> 를 참조할 수 있습니다.</p></blockquote><p>아래 <code>생성자 함수</code>, <code>객체 리터럴</code> 두가지 방식의 객체 생성 코드를 통해 객체의 <code>__proto__</code> 속성이 참조하는 값을 확인해 보겠습니다.</p><h3 id="생성자-함수-사용"><a class="header-anchor" href="#생성자-함수-사용"></a>생성자 함수 사용</h3><p>생성자 함수를 사용하여 생성된 객체의 <code>__proto__</code> 속성값을 확인하기 위한 코드 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Human</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> jaewon = <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line">jaewon.<span class="property">__proto__</span> === <span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Human</code> 이라는 생성자 함수로 생성된 객체(<code>jaewon</code> 인스턴스)의 <code>__proto__</code> 속성이 생성자 함수 <code>Human</code> 의 <code>prototype</code> 속성이 참조하는 <code>prototype object</code> 임을 확인할 수 있습니다.</p><h3 id="객체-리터럴-사용"><a class="header-anchor" href="#객체-리터럴-사용"></a>객체 리터럴 사용</h3><p>리터럴 방식으로 선언된 객체의 <code>__proto__</code> 속성값을 확인하기 위한 코드 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jaewon = &#123;&#125;;</span><br><span class="line">jaewon.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>위 코드를 보면 리터럴 방식으로 객체를 선언 했는데 선언된 객체의 <code>__proto__</code> 속성은 생성자 함수 <code>Object</code> 의 <code>prototype object</code> 를 참조하고 있습니다. <code>new Object()</code> 를 사용하여 생성한게 아니라 리터럴 방식으로 선언했는데 어떻게 된 것 일까요?</p><p>자바스크립트는 리터럴 방식으로 객체를 선언하더라도 내부적으로 해당 타입에 대응하는 <code>Wrapper Object</code>(생성자 함수)를 사용하여 아래 코드와 같이 객체를 생성하기 때문에 리터럴 방식으로 생성된 객체의 <code>__proto__</code> 속성도 <code>Object.prototype</code> 객체를 참조하게 되는 것 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jaewon = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">jaewon.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>아래는 <code>Warpper Object</code> 를 사용하는 예제 코드들 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;blabla&quot;</span>;</span><br><span class="line"><span class="comment">// var str = new String(&quot;blabla&quot;);</span></span><br><span class="line">str.<span class="property">__proto__</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="comment">// var arr = new Array();</span></span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> is = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// var is = new Boolean();</span></span><br><span class="line">is.<span class="property">__proto__</span> === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>지금까지 <code>prototype object</code> 와 <code>prototype link</code>에 대해 알아봤습니다. <code>prototype</code> 이 뭔지 감이 좀 오시나요?<br>이제 언제 사용하는지 알아보면서 <code>prototype</code> 에 대해 좀 더 알아보도록 하겠습니다.</p><h2 id="언제-사용하는-걸까요"><a class="header-anchor" href="#언제-사용하는-걸까요"></a>언제 사용하는 걸까요?</h2><p>자바스크립트는 <code>prototype</code> 기반 언어로 객체의 뼈대가 될 <code>class</code> 가 없는 언어입니다. 대신 앞에서 살펴본 <code>prototype</code> 을 가지며 이것을 사용해 <code>class</code> 를 사용한 것 처럼 객체를 생성할 수 있습니다. 정확히 말하면 <code>prototype</code> 을 가지는 <code>생성자 함수</code> 를 사용하여 <code>class</code> 를 사용한 것 처럼 객체를 생성할 수 있습니다. 즉, <code>prototype</code> 은 <strong>효율적</strong>으로 <strong>객체</strong>를 <strong>생성</strong>할 필요가 있을 때 사용하게 됩니다.</p><p>효율적인 객체 생성의 이해를 돕기위해 아래 <code>prototype 을 활용하지 않은 생성자 함수</code>, <code>prototype 을 활용한 생성자 함수</code> 두개의 코드를 준비하였습니다.</p><h3 id="프로토타입을-활용하지-않은-생성자-함수"><a class="header-anchor" href="#프로토타입을-활용하지-않은-생성자-함수"></a>프로토타입을 활용하지 않은 생성자 함수</h3><p>요구사항을 처리하기 위한 모든 멤버를 생성자 함수에 선언합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 붕어빵틀 = <span class="keyword">function</span>(<span class="params"> initParam </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.만든사람 = initParam.만든사람;</span><br><span class="line">    <span class="variable language_">this</span>.앙금 = initParam.앙금;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.가열 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;반죽 가열합니다.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.뒤집기 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;붕어빵 뒤집습니다.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.유통기한 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">            expirationDate = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        today.<span class="title function_">setDate</span>( today.<span class="title function_">getDate</span>() + expirationDate );</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.유통기한 = today.<span class="title function_">toLocaleDateString</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.만들기 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.가열();</span><br><span class="line">        <span class="variable language_">this</span>.뒤집기();</span><br><span class="line">        <span class="variable language_">this</span>.가열();</span><br><span class="line">        <span class="variable language_">this</span>.유통기한();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.앙금 + <span class="string">&quot; 붕어빵이 완성되었습니다.&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.유통기한 + <span class="string">&quot; 까지 드실 수 있습니다.&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.만든사람 &amp;&amp; <span class="variable language_">this</span>.앙금 &amp;&amp; <span class="variable language_">this</span>.만들기();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="프로토타입을-활용한-생성자-함수"><a class="header-anchor" href="#프로토타입을-활용한-생성자-함수"></a>프로토타입을 활용한 생성자 함수</h3><p>인스턴스마다 독립적으로 가져야하는 요구사항은 생성자 함수의 멤버(인스턴스 멤버)로, 공유되어야 하는 부분들은 <code>prototype object</code> 의 멤버로 선언합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 붕어빵틀 = <span class="keyword">function</span>(<span class="params"> initParam </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.만든사람 = initParam.만든사람;</span><br><span class="line">    <span class="variable language_">this</span>.앙금 = initParam.앙금;</span><br><span class="line">    <span class="variable language_">this</span>.만든사람 &amp;&amp; <span class="variable language_">this</span>.앙금 &amp;&amp; <span class="variable language_">this</span>.만들기();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">붕어빵틀.<span class="property"><span class="keyword">prototype</span></span>.만들기 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.가열();</span><br><span class="line">    <span class="variable language_">this</span>.뒤집기();</span><br><span class="line">    <span class="variable language_">this</span>.가열();</span><br><span class="line">    <span class="variable language_">this</span>.유통기한();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.앙금 + <span class="string">&quot; 붕어빵이 완성되었습니다.&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.유통기한 + <span class="string">&quot; 까지 드실 수 있습니다.&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">붕어빵틀.<span class="property"><span class="keyword">prototype</span></span>.가열 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;반죽 가열합니다.&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">붕어빵틀.<span class="property"><span class="keyword">prototype</span></span>.뒤집기 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;붕어빵 뒤집습니다.&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">붕어빵틀.<span class="property"><span class="keyword">prototype</span></span>.유통기한 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">        expirationDate = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    today.<span class="title function_">setDate</span>( today.<span class="title function_">getDate</span>() + expirationDate );</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.유통기한 = today.<span class="title function_">toLocaleDateString</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="인스턴스-생성"><a class="header-anchor" href="#인스턴스-생성"></a>인스턴스 생성</h3><p><code>prototype</code> 을 사용한 생성자 함수나 사용하지 않은 생성자 함수 모두 아래 코드로 인스턴스를 생성할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 팥붕어빵<span class="number">1</span> = <span class="keyword">new</span> 붕어빵틀(&#123; 앙금: <span class="string">&quot;팥&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// &#123;만든사람: &quot;시장상인 A&quot;, 앙금: &quot;팥&quot;, 유통기한: &quot;2019. 6. 20.&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> 슈크림붕어빵<span class="number">1</span> = <span class="keyword">new</span> 붕어빵틀(&#123; 앙금: <span class="string">&quot;슈크림&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// &#123;만든사람: &quot;시장상인 A&quot;, 앙금: &quot;슈크림&quot;, 유통기한: &quot;2019. 6. 20.&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>하지만 인스턴스 생성 시점에서 아래와 같이 두 방식의 차이점이 발생합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 프로토타입을 활용하지 않은 생성자 함수의 인스턴스</span></span><br><span class="line">팥붕어빵<span class="number">1.</span>가열 === 슈크림붕어빵<span class="number">1.</span>가열 <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 프로토타입을 활용한 생성자 함수의 인스턴스</span></span><br><span class="line">팥붕어빵<span class="number">1.</span>가열 === 슈크림붕어빵<span class="number">1.</span>가열 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>prototype 을 활용하지 않은 생성자 함수의 인스턴스</code>: 생성자 함수의 모든 멤버를 받기 때문에 굳이 필요치 않은 부분까지 메모리에 올라가 인스턴스를 많이 만들수록 부담이 됩니다.</li><li><code>prototype 을 활용한 생성자 함수의 인스턴스</code>: <code>prototype object</code>에 선언된 멤버들은 매 인스턴스 마다 메모리에 올라가지 않고 동일한 참조값을 가집니다. ( 원시타입의 경우 인스턴스 멤버, <code>prototype</code> 멤버 여부와 관계 없이 메모리에 올라갑니다. )</li></ul><h3 id="기타-프로토타입-특징"><a class="header-anchor" href="#기타-프로토타입-특징"></a>기타 프로토타입 특징</h3><ul><li><code>prototype</code> 멤버의 내용을 동적으로 변경하면 변경 이전에 생성된 객체라도 적용이 됩니다.</li><li>인스턴스에서는 <code>prototype</code> 의 내용을 읽을수는 있지만 쓸수는 없습니다.</li><li><code>prototype</code> 체인의 마지막은 <strong>Always</strong> <code>Object.prototype</code> 입니다.</li></ul><p>지금까지 <code>prototype</code> 이 무엇이고 언제 사용하게 되는지 알아보았습니다. 여기까지만 이해하셔도 이전과는 다른 방식으로 코드를 좀 더 재밋게 작성할 수 있으실거라 생각합니다.</p><p>하지만 조금 더 재밋게 사용하기 위해 <code>prototype</code> 상속에 대해서도 조금 알아 보겠습니다.</p><h2 id="프로토타입을-사용한-상속-구현"><a class="header-anchor" href="#프로토타입을-사용한-상속-구현"></a>프로토타입을 사용한 상속 구현</h2><p>자바스크립트 상속은 객체만으로 가능하지만 복잡한 어플리케이션의 요구사항을 만족하기엔 무리가 있습니다. 그래서 클래스와 같은 생성자 함수를 상속함하여 코드를 좀 더 짜임세 있게 설계할 필요가 있습니다. 실제로는 프로토타입 체인을 연결하고 필요에 따라 메소드를 오버라이드 해주는 것이 전부입니다.</p><p>지금은 ECMAScript 2015 (ES6) 스펙에 <code>class</code>, <code>extends</code> 키워드가 추가되어 쉽게 클래스(생서자 함수)와 상속을 사용할 수 있습니다. 하지만 저처럼 아직 <code>class</code>, <code>extends</code> 키워드를 사용하지 못하는 안타까운 환경에 놓인 개발자들도 있습니다.</p><p>저같은 개발자를 위해 <strong>old school</strong> 방식으로 상속을 구현하는 방법에 대해 알아보겠습니다.<br>구현하려는 상속은 다음과 같은 요구사항을 가집니다.</p><ul><li>부모 생성자가 만드는 인스턴스별 고유해야할 속성 참조가능</li><li>부모 생성자의 prototype 멤버에 접근가능</li></ul><p>이해를 돕기위해 제가 좋아하는 자동차로 예제 코드를 작성해 보겠습니다.</p><p>폭스바겐/아우디 사에서는 비용절감을 위한 차세대 자동차 플랫폼을 연구 개발하였습니다. 개발된 플랫폼의 이름은 MQB 로 앞으로 폭스바겐, 아우디에서 생산되는 많은 차종에 공통으로 사용될 플랫폼 입니다.</p><blockquote><p><strong>MQB</strong> : 폭스바겐, 아우디사의 비용절감 전략 플랫폼으로 Golf, A3 등 여러 차종에 범용적으로 사용되는 자동차 프레임</p></blockquote><h3 id="MQB"><a class="header-anchor" href="#MQB"></a>MQB</h3><p>폭스바겐, 아우디(생성자 함수)가 상속받을 차세대 자동차 플랫폼 생성자 함수입니다.<br>플랫폼이 버틸 수 있는 최대 마력수, 사용 가능한 구동타입, 휠 베이스 등의 정보를 가지고 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">MQB</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wheelbase</span> = <span class="string">&quot;4.18&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">engineLayout</span> = [<span class="string">&quot;FF&quot;</span>, <span class="string">&quot;FR&quot;</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxHorsePower</span> = <span class="number">350</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">MQB</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getMaxHorsePower</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">maxHorsePower</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">MQB</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getEngineLayout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">engineLayout</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FF: 엔진이 차체 앞에 위치하면 앞바퀴 굴림의 구동방식 (전륜)<br>FR: 엔진이 차체 앞에 위치하면 뒤바퀴 굴림의 구동방식 (후륜)</p></blockquote><h3 id="Volkswagen"><a class="header-anchor" href="#Volkswagen"></a>Volkswagen</h3><p>MQB 플랫폼을 상속받아 자동차를 생산할 Volkswagen 생성자 함수입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Volkswagen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">horsePower</span> = <span class="number">0</span>; <span class="comment">// 마력</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fuel</span>; <span class="comment">// 연료타입</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MQB 와 Volkswagen 두개의 생성자 함수가 준비되었습니다. Volkswagen 은 MQB 플랫폼을 상속받아 자동차를 만들어야 하기 때문에 <strong>생성자 빌려쓰기</strong> 와 <strong>프로토타입 링크 참조값 변경</strong> 을 통하여 두 클래스간 상속 관계를 맺어 주도록 하겠습니다.</p><h4 id="생성자-빌려쓰기"><a class="header-anchor" href="#생성자-빌려쓰기"></a>생성자 빌려쓰기</h4><p><code>prototype link</code> 의 참조값 변경으로 부모 <code>prototype object</code> 는 상속 받을 수 있지만 부모 생성자가 만드는 인스턴스 멤버는 상속 받을 수 없기 때문에 부모 생성자가 만든 인스턴스의 멤버를 참조할 수 있도록 <code>MQB.apply( this, arguments )</code> 코드를 호출해 줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Volkswagen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable constant_">MQB</span>.<span class="title function_">apply</span>( <span class="variable language_">this</span>, <span class="variable language_">arguments</span> ); <span class="comment">// 생성자 빌려쓰기</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">horsePower</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fuel</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>생성자 빌려쓰기 후 Volkswagen 인스턴스를 생성하면 인스턴스 멤버로 부모 생성자인 MQB 의 인스턴스 멤버도 참조할 수 있습니다. 다음으로 <code>prototype link</code> 의 참조값 변경을 통하여 프로토타입 상속을 구현을 완성해 보겠습니다.</p><h4 id="프로토타입-링크-참조값-변경"><a class="header-anchor" href="#프로토타입-링크-참조값-변경"></a>프로토타입 링크 참조값 변경</h4><p>임의의 객체 <code>F</code> 를 사용하여 부모 생성자의 <code>prototype</code> 을 상속받고, 해당 객체의 인스턴스를 자식 객체 <code>prototype link</code> 의 참조값으로 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable constant_">MQB</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="title class_">Volkswagen</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br></pre></td></tr></table></figure><p>상속 후 <code>Volkswagen.prototype.__proto__</code> 찍어보면 <code>MQB.prototype</code> 를 참조하고 있음을 알 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Volkswagen</span>.<span class="property">prototpye</span> = &#123;</span><br><span class="line">    __proto__ : <span class="variable constant_">MQB</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 하면 상속 자체는 모두 끝이 납니다. 하지만 상속을 통하여 코드를 잘 작성하기 위해서 주의해야할 점이 있습니다.</p><p>반드시 <code>prototype</code> 상속을 위해 앞에서 보여드린 상속 코드 이후 아래와 같이 자식 생성자 함수의 <code>prototype object</code> 에 멤버를 추가해야 한다는 점 입니다. 역순으로 할 경우 자식 생성자 함수의 <code>prototype object</code> 에 선언된 모든 멤버는 가비지 컬렉터에 의해서 날아가게 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Volkswagen</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setFuel</span> = <span class="keyword">function</span>(<span class="params"> fuelType </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fuel</span> = fuelType;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Volkswagen</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setEngine</span> = <span class="keyword">function</span>(<span class="params"> engineType </span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> _supportEngines = <span class="variable language_">this</span>.<span class="title function_">getEngineLayout</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=-<span class="number">0</span>,l=_supportEngines.<span class="property">length</span>; i&lt;l; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>( engineType === _supportEngines[i] )&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">engineType</span> = _supportEngines[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Volkswagen</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setHorsePower</span> = <span class="keyword">function</span>(<span class="params"> horsePower </span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( horsePower &gt; <span class="variable language_">this</span>.<span class="title function_">getMaxHorsePower</span>() )&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;can not set the horse power : &quot;</span> + horsePower);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">horsePower</span> = horsePower;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>MQB 를 상속받은 Volkswagen 를 통하여 GTI, GTD 같은 차들을 만들 수 있으며 마력이나 구동방식 셋팅시 MQB 가 제공하는 함수를 통하여 미리 설계된 범위 내에서 안전한 차량을 생산할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> golf_gti = <span class="keyword">new</span> <span class="title class_">Volkswagen</span>();</span><br><span class="line"><span class="keyword">var</span> golf_gtd = <span class="keyword">new</span> <span class="title class_">Volkswagen</span>();</span><br></pre></td></tr></table></figure><p>마지막으로 좀 더 깔끔하게 상속을 처리를 위해 앞에서 살펴본 <code>prototype link</code> 참조값 변경 코드를 아래와 같이 <code>inherit</code> 함수로 만들어 줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inherit = <span class="keyword">function</span>(<span class="params"> Parent, Child </span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property">super</span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>개선된 함수는 아래와 같은 기능을 합니다.</p><ul><li>파라미터로 부모, 자식 생성자 함수를 받습니다.</li><li>임의의 생성자 함수 <code>F</code> 를 통해 자식 생성자 함수의 <code>prototype link</code> 를 변경합니다.</li><li><code>constructor</code> 속성을 추가하여 생성자가 누구인지 알려줍니다.<ul><li>명시하지 않을 경우 체인을 타고 부모 <code>prototype object</code> 의 <code>constructor</code> 를 참조하기 때문에 부모 생성자를 참조하게 됩니다.</li></ul></li><li>마지막으로 <code>prototype</code> 체인을 타지 않고 부모 생성자의 <code>prototype</code> 멤버를 바로 호출하기 위한 <code>super</code> 키워드를 추가합니다.</li></ul><p>재사용 가능한 상속 함수를 만듦으로써 <code>prototype</code> 을 사용한 상속도 이제 손쉽게 할 수 있게 되었습니다. 이제 자바스크립트에서 넘어야할 많은 산들중 큰 산을 하나 넘었습니다.</p><p>기왕 산을넘은 김에 <strong>old school</strong> 방식이 아닌 모던한 방법도 알아볼까요?<br>조금 허무할 수 도 있습니다. 너무 심플하거든요.</p><h2 id="모던하게-자바스크립트-상속-구현하기"><a class="header-anchor" href="#모던하게-자바스크립트-상속-구현하기"></a>모던하게 자바스크립트 상속 구현하기</h2><p><strong>ECMAScript 2015</strong> 문법을 사용한 상속 구현이지만 내부적으로는 <strong>old school</strong> 방식과 동일하게 상속을 처리합니다. 아래 두가지 방법을 소개해 드립니다.</p><ol><li>ECMAScript 2015 (ES6) 문법인 <code>Object.create</code> 메소드 사용<blockquote><p>구글링 하다가 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Classical_inheritance_with_Object.create()">Classical inheritance with Object.create()</a> 이라는 페이지를 찾았습니다. 모던한 방법이 아닌 클래시컬한 방법이라고 하네요…ㅠ</p></blockquote></li><li>ECMAScript 2015 (ES6) 문법인 <code>class</code>, <code>extends</code> 키워드 사용</li></ol><h3 id="Object-create"><a class="header-anchor" href="#Object-create"></a>Object.create</h3><p><code>Object.create</code> 메서드는 지정된 <code>prototype object</code> 및 속성을 갖는 새 객체를 만듭니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Volkswagen</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable constant_">MQB</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p>위 코드를 사용하면 임의의 생성자 함수를 직접 만들 필요가 없이 내부적으로 아래와 같이 <code>prototype link</code> 참조를 변경해 줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Volkswagen</span>.<span class="property">prototpye</span> = &#123;</span><br><span class="line">    __proto__ : <span class="variable constant_">MQB</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>prototype</code> 상속은 잘 되었지만 앞서 만든 <code>inherit</code> 함수에 추가한 <code>constructor</code> 나 <code>super</code> 같은 내용은 처리해 주지 않습니다. 따라서 아래와 같이 기존에 만든 상속 함수에 <code>prototype link</code> 변경 부분만 수정하여 좀 더 간결한 상속 함수로 개선해 줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inherit = <span class="keyword">function</span>(<span class="params"> Parent, Child </span>)&#123;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property">super</span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>상속 함수 자체는 많이 심플해 졌지만 부모 생성자의 인스턴스 멤버에 접근하기 위해서는 여전히 자식 함수에서 부모 생성자 함수 빌려쓰기를 해줘야 합니다.</p><p>이제 <code>class</code>, <code>extends</code> 키워드를 사용해 더 심플해질 차례입니다.</p><h3 id="class-extends"><a class="header-anchor" href="#class-extends"></a>class, extends</h3><p><code>class</code> 키워드를 사용하여 부모 클래스를 <code>MQB</code> 를 선언합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MQB</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">complete</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">title</span> = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">title</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부모 클래스 <code>MQB</code> 를 상속받을 <code>Volkswagen</code> 클래스는 <code>extends</code> 키워드를 사용하여 선언합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Volkswagen</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MQB</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">title</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(title); <span class="comment">// old school 방식에서 생성자 빌려쓰기 부분</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">complete</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getSuper</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getTitle</span>(); <span class="comment">// 상속시 따로 super 속성을 추가하지 않아도 됩니다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상속이 완료되었습니다. <strong>old school</strong> 방식처럼 <strong>생성자 빌려쓰기</strong>, <strong>constructor</strong>, <strong>super</strong> 를 처리하기 위한 어떠한 작업도 필요 없습니다. 코드에서 보듯이 <strong>super</strong> 키워드로 부모 생성자를 초기화 할 수 있으며, <strong>super.getTitle</strong> 과 같이 부모 클래스의 <code>prototype object</code> 를 바로 참조할 수 도 있습니다. <code>인스턴스.constructor</code> 를 찍어보면 아래와 같이 인스턴스의 생성자 함수인 <code>Volkswagen</code> 가 잘 찍히는 것도 확인해 볼 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> golf = <span class="keyword">new</span> <span class="title class_">Volkswagen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(golf.<span class="property">constructor</span>); </span><br><span class="line"><span class="comment">// class Volkswagen extends MQB &#123;...&#125;</span></span><br></pre></td></tr></table></figure><h2 id="마무리-2"><a class="header-anchor" href="#마무리-2"></a>마무리</h2><p><code>prototype</code> 이 무엇이며 언제 사용되는지와 <code>prototype</code> 을 사용하여 상속을 구현하는 몇가지 방법들도 살펴보았습니다. 부족한 내용이지만 조금이나마 도움이 되었기를 바라며 es6 이상의 개발 환경에 있든 아니든 <code>prototype</code> 을 활용하여 좀 더 즐겁게 개발하실 수 있기를 바랍니다.</p><p>잘 못된 내용이나 개선점이 있으면 피드백을 남겨주시면 반영하도록 하겠습니다.<br>읽어주셔서 감사합니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> prototype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>괜찮은 웹 프론트 개발자</title>
      <link href="/2019/05/10/Frontend-Developer/"/>
      <url>/2019/05/10/Frontend-Developer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>해당 포스트는 매우 주관적인 의견임을 말씀드립니다.<br>저와 같은 커리어를 가시는 프론트 개발자 분들께 조금이나마 도움이 될 수 있기를 바랍니다.</p></blockquote><p>프론트 개발자로 일하면서 프론트 개발자가 서비스에서 차지하는 중요도가 점점 높아짐을 느끼고 있는 요즘 입니다. 퍼블리싱과 백엔드 개발의 모호한 중간 어디쯤 이었던 과도기도 이제는 옛말이 되었고 프론트 개발자로서 갖추어야 할 역량과 요구되는 스펙은 점점 명확해지고 있습니다. (명확하게 점점 더 많아지고 있죠…)</p><p>예전에는 퍼블리셔라는 직군이 HTML, CSS를 생산하고 그 이후는 대부분 백엔드 개발자가 작업했습니다. JAVASCRIPT 통한 UI 인터렉션은 회색 영역으로 어떤 회사는 퍼블리셔가, 어떤 회사는 백단 개발자가 처리했었습니다.</p><p>하지만 애플리케이션 UI 상태의 복잡도가 점점 증가하면서 MVC, MVP, MVVM 등 디자인 패턴을 지향하는 Backbone, Ember, Angular, React, Vue 등의 프론트 라이브러리, 프레임워크가 등장하였고 백단에서도 MSA등 아키텍쳐의 변화가 생기면서 웹 개발의 패러다임이 빠르게 변화하기 시작한 것 같습니다.</p><p>백단에서 처리되던 UI 관련 로직이 프론트로 넘어오고 API 호출을 필요로 하는 UI가 많아지기 시작했습니다. SPA가 뜨기도 했고 SEO 이슈나 초기 UX 개선을 위해 SSR에 대한 요구사항도 생겨났으며 빠르게 변하는 최신 기술과 개발환경 및 자동화 툴 도입을 위한 task runnner, bundler 에 대한 이해도 필요하게 되었습니다.</p><p>마크업을 만들고, 디자인을 관리하고 UI 인터렉션만을 처리하던 시절을 지나 이제는 도메인을 이해하고 API 작업자와 협업하며, 화면의 인터렉션을 넘어 복잡한 UI 상태를 효율적으로 관리해야 하는 직군이 되었습니다. 나아가 성능 최적화를 고려하고 자동화와 테스트를 도입하여 서비스를 안정적이고 성공적으로 운용하기 위해 꼭 필요한 직군이 되었습니다.</p><p>확실히 이러한 직군에 대한 수요가 점점 늘어나고 있는 걸 체감할 수 있습니다. 하지만 주변에서 자주 듣는 얘기가 있습니다. <strong>“괜찮은 프론트 개발자 없나요?”</strong> 라는 말 입니다.</p><p>괜찮은 프론트 개발자를 구하기가 왜 힘든걸까요?</p><p>잠깐 과도기와 요즘의 프론트 개발 차이점에 대해서 알아보겠습니다.</p><p>아마 과도기에는 퍼블리셔가 프론트 개발을 어느 정도 해내도 서비스에 큰 문제가 없었을 겁니다. 엄밀히 말하면 사실 지금도 큰 문제는 없습니다. 제 경험상 변수를 전역에 남발하든, 코드가 모듈화 되어 있지 않거나 심지어 API 응답에 따른 UI 처리를 setTimeout 같은 비동기 메서드로 어거지로 끼워맞춘 수준의 코드라도 사실상 장애는 쉽게 나지는 않았습니다.</p><p>즉, 요즘 인기있는 React를 사용하여 컴포넌트를 만들고 복잡한 UI 상태는 Redux 같은 상태관리 라이브러리에게 위임하고 async, await 를 사용하여 깔끔하게 비동기 처리하고 import, exprot, arrow function, class등 es6 문법이나 typescript 를 사용하지 않더라도, 적절한 디자인 패턴과 예외 처리 같은걸 고민하지 않더라도 서비스는 잘 굴러간다는 얘기입니다.</p><p>회사가 애자일하게 돌아간다면 빠르게 기술부채가 쌓이겠지만 사실 그 부채가 터지기까지 아주 오랜 시간이걸린다는 게 문제입니다. 어떻게 보면 기술 부채가 터지긴 전까지는 오히려 큰 고민 없이 요구사항을 더 빠르고 편하게 서비스에 녹일 수 있을지도 모릅니다. 더군다나 회사가 애자일하게 돌아가지 않는다면 서비스가 망하기 전에는 기술부채를 상환하는 날이 오지 않을지도 모르죠.</p><p>정작 제대로 된 개발 문화와 좋은 개발자들이 있는 회사에서 프론트 개발자를 뽑으려 보면 지원자가 기대치에 미치지 못하는 많은 이유가 여기에 있다고 생각합니다.</p><p>좋은 개발자가 되기 위해서는 개인의 노력과 함께 개발문화, 조직, 환경도 매우 중요합니다. 개발문화, 환경은 결국 구성원들이 만든다고 생각하기 때문에 스스로가 좋은 개발자가 되기 위해 노력하는 것이 중요하다고 생각하지만 슬프게도 이미 굳어버린 조직이라면 더 나은 환경을 찾아 떠나는 것이 좋을지도 모르겠습니다.</p><p>내가 속한 환경을 변화시키든 더 좋은 환경을 찾아가든 먼저 스스로가 좋은 프론트 개발자가 되어야 함은 분명합니다. 하지만 과거처럼 퍼블리싱과 조금의 자바스크립트 경험으로는 요즘의 프론트 개발 트렌드를 리드하는 건 고사하고 따라가기도 힘들 겁니다. 중요한 것은 믿을 수 있는 기본기와 빠르게 변화하는 트렌드를 잘 읽고 대응할 수 있는 유연함입니다.</p><p>프론트 개발자로 일하면서 많은 동료를 봐왔습니다. 퍼블리셔에서 프론트 개발자로 영역을 넓히신 분, 백엔드 개발만 하다 프론트로 넘어 오신 분, 최근에는 신입 공채로 입사해 첫 커리어를 프론트 개발로 시작하시는 분들까지 많은 프론트 개발자 유형을 보았습니다.</p><p>스스로 개발하면서 느끼기도 했지만 다른 환경에서 오신 분들이 일하는 방식을 보면서 느낀점은 확실히 프론트단만 잘 아는 개발자 보다 여러 분야에 대한 이해가 있는 개발자가 더 좋은 코드를 작성한다는 사실 입니다.</p><p>어떤 분야에 대한 이해가 필요한지는 처한 환경에 따라 다를 수 있지만 서버 개발자나 DBA, 인프라 담당자, 개발자보다 개발을 잘 할 것 같은 포스를 가진 기획자와 대화하다 보면 자연스럽게 알 수 있습니다. 이슈에 대한 확실한 피드백과 명확한 요구사항을 파악하여 best way를 고민하기 위해서 내가 알고 있어야 하는게 무었인지 말입니다.</p><p><img src="books.jpg" alt=""></p><blockquote><p>위 책은 제가 아무것도 모르던 시절에 샀던 책들입니다. 네트워크에 대해 학습하고 싶은 프론트 개발자라면 위에서부터 3,2,1,4 순으로 책을 읽어보시길 권합니다.</p></blockquote><p>제 경우에는 <code>용어, 네트워크, 인프라, 모던 웹 프레임워크, 모델링, SQL</code> 에 대한 필요를 느겼습니다. 프론트 개발을 떠나 웹 개발자라면 네트워크와 인프라에 대한 지식은 필수라고 생각하며, 모던 웹 프레임워크에 대한 이해, SQL, 모델링 및 기타 개발 및 도메인 관련 용어에 대한 이해가 있다면 불필요한 커뮤니케이션 비용을 줄이고 더 나은 코드를 작성하는데 도움이 될 것 입니다.<br>추가로 도메인과 UX에 대한 이해를 갖추고 프론트 개발자로서도 뛰어난 역량을 가지고 있다면 감히 스스로를 괜찮은 개발자라고 생객해도 되지 않을까요? (자료구조, 알고리즘 과 같이 프론트, 백엔드를 떠나 소프트웨어 엔지니어로서 알아야 하는 내용은 따로 언급하지 않았습니다.)</p><p><strong>스스로 프론트 개발자라는 타이틀에 갇히지 않고 웹 서비스를 만드는 웹 개발자라는 마인드로 커리어를 쌓아간다면 분명 더 좋은 프론트 개발자가 될 수 있을 거라고 생각합니다.</strong></p><p>아래는 2016년에 비슷한 주제로 이전 블로그에 작성했던 글의 일부 입니다. 정확히는 <strong>‘UI 개발자가 네트워크에 대해 알아야 하는 이유’</strong> 라는 주제 였습니다. 3년전 이지만 여전히 유효한 내용이고 도움이 될 것 같아 해당 포스트에 추가하였습니다.</p><blockquote><p>UI 개발이 주 업무이지만 경험상 UI 개발자가 서버쪽 코드를 보고 로직을 이해하거나 쿼리, 네트워크에 대한 이해가 있으면 일을 하기가 훨씬 편해지고 커뮤니케이션 비용을 많이 줄일 수 있다는 걸 알았다. 다시 말하면 커뮤니케이션 비용이 줄어 일을 하기가 편해지는 것 같다.<br><br/>예를 들어 로컬서버를 띄우고 API 를 호출하여 UI 개발 중이데 API 가 503이 뜨면 에러로그를 보고 원인을 파악하거나 내가 호출한 API 가 이슈인지 다른 API 문제인지 어느정도 판단하여 담당자를 찾아 빠르게 대응할 수 있다. 이건 회사마다 요구되는 역량이나 업무에 따라 다르겠지만 지금은 알아야 좀 더 효율적인 업무를 할 수 있다.<br><br/>그리고 앞서 언급한 이유를 떠나서 개인적인 측면에서 학습 동기는 네트워크를 알고 개발하면 UI 개발에 더 재미를 느낄 수 있기 때문이다. (네트워크에만 국한되지는 않는다.) 서비스 사용자가 어떤 이벤트를 발생시키고  내 코드가 데이터를 서버로 보내고 보낼 때 프로토콜은 뭐가 사용됫는지, 헤더,바디에는 어떤 정보가 담겨 가는지, 보안 이슈는 없는지, 요청 데이터가 어떻게 패킷으로 쪼개져 ip, port, mac 어드레스 등의 정보를 가지고 라우터, 스위치, 방화벽을 통해 어떻게 서버 애플리케이션에 도착하고 응답데이터가 어떻게 다시 오는지 그리고 그렇게 도착한 데이터로 UI 를 그리고 그려진 UI 가 사용자에게 좋은 UX 를 제공하여 이를 통한 매출이 발생한다는 것을 알고 UI 개발을 하면 개발이 훨씬 더 재미가 있다.<br><br/>이전에는 스스로 비전공자이고(지금은 졸업 후 컴공과로 편입 하였다.) UI 개발자라 내가 하는 업무에만 포커스를 맞추자는 생각이 강했다. 대부분의 업무가 DOM 핸들링이었고 UI 개발만 해도 학습할게 너무 많았기에 마음에 여유가 없었다. 지금도 UI 로직을 잘 짜거나 퍼포먼스가 높은 주니어 개발자라고 생각하진 않지만 이전 보다는 여유가 조금 생겼고 업무상 API 를 호출할 일이 많다보니 자연스럽게 API 개발자와 커뮤니케이션이 잦아지고, 모르는 부분에서 답답함을 많이 느끼게 되었다.<br><br/>그래서 책을 보기 시작했는데 역시 쉬운건 없다… 4권중 2권으 읽었는데 보고보니 두권이 다 그림으로 배우는 책들이다. 학습은 최대한 쉽게쉽게가는게 맞는 것 같다ㅋ 남은 책들 중 HTTP 완벽 가이드는 읽을 엄두가 안나고 인프라의 기본은 어느정도 네트워크를 아는 상태에서 지금 다니는 회사 인프라와 비교하면서 읽으면 재밋지 않을까싶다.</p></blockquote><p>저도 부족한 점이 많지만 좋은 동료가 되기 위해서 그리고 어제보다 더 나은 개발자가 되기위해 노력하는 개발자 중의 한 사람으로서 저와 같은 커리어를 가시는 분들께 조금이나마 도움이 되었길 바랍니다. 궁금한 점이나 의견은 댓글로 남겨주시면 답변 드리겠습니다.</p><!-- > 아래는 같은 주제로 2016년에 다른 블로그에 작성했던 포스트입니다. --><!-- UI개발이 업무이지만 경험상 UI개발자가 서버쪽 코드를 보고 로직을 이해하거나 쿼리, 네트워크에 대한 이해가 있으면 일을 하기가 훨씬 편해지고 커뮤니케이션 비용을 많이 줄일 수 있다는 걸 알았다. 다시 말하면 커뮤니케이션 비용이 줄어 일을 하기가 편해지는 것 같다. 예를 들어 로컬서버를 띄우고 API를 호출하여 UI개발 중이데 API가 503이 뜨면 에러로그를 보고 원인을 파악하거나 내가 호출한 API가 이슈인지 다른 API문제인지 어느정도 판단하여 담당자를 찾아 빠르게 대응할 수 있다. 이건 회사마다 요구되는 역량이나 업무에 따라 다르겠지만 지금은 알아야 좀 더 효율적인 업무를 할 수 있다. 그리고 앞서 언급한 이유를 떠나서 개인적인 측면에서 학습 동기는 네트워크를 알고 개발하면 UI개발에 더 재미를 느낄 수 있기 때문이다. (네트워크에만 국한되지는 않는다.) 서비스 사용자가 어떤 이벤트를 발생시키고  내 코드가 데이터를 서버로 보내고 보낼 때 프로토콜은 뭐가 사용됫는지, 헤더,바디에는 어떤 정보가 담겨 가는지, 보안 이슈는 없는지, 요청 데이터가 어떻게 패킷으로 쪼개져 ip, port, mac 어드레스 등의 정보를 가지고 라우터, 스위치, 방화벽을 통해 어떻게 서버 애플리케이션에 도착하고 응답데이터가 어떻게 다시 오는지 그리고 그렇게 도착한 데이터로 UI를 그리고 그려진 UI가 사용자에게 좋은 UX를 제공하여 이를 통한 매출이 발생한다는 것을 알고 UI개발을 하면 개발이 훨씬 더 재미가 있다. --><!-- 이전에는 스스로 비전공자이고(지금은 졸업 후 컴공과로 편입 하였다.) UI개발자라 내가 하는 업무에만 포커스를 맞추자는 생각이 강했다. 대부분의 업무가 DOM컨틀이었고 UI개발만해도 학습할게 너무 많았기에 마음에 여유가 없었다. 지금도 UI로직을 잘 짜거나 퍼포먼스가 높은 주니어 개발자라고 생각하진 않지만 이전 보다는 여유가 조금 생겼고 업무상 API를 호출할 일이 많다보니 자연스럽게 API개발자와 커뮤니케이션이 잦아지고, 모르는 부분에서 답답함을 많이 느끼게 되었다. 그래서 책을 보기 시작했는데 역시 쉬운건 없다.. 4권중 2권으 읽었는데 보고보니 두권이 다 그림으로 배우는 책들이다. 학습은 최대한 쉽게쉽게가는게 맞는 것 같다ㅋ 남은 책들 중 HTTP완변 가이드는 읽을 엄두가 안나고 인프라의 기본은 어느정도 네트워크를 아는 상태에서 지금 다니는 회사 인프라와 비교하면서 읽으면 재밋지 않을까싶다. --><!-- 네트워크에 관심이 있는 일반인이나 주니어 개발자에게  “TCP/IP 쉽게, 더 쉽게” 책을 추천한다. 내용 정리가 너무 잘 되어 있고 그림이 많아 이해하기 편하다.(학습하는 입장에서 누군가가 좋은 책을 추천해주면 너무 고마웠어서 추천합니다. 책과는 아무런 관련없는 사람입니다.) --><!-- 앞서 읽은 두권을 다시 봐야할 것 같아서 남은 2권을 언제즘 읽어볼 수 있을지는 모르겠다…ㅋ -->]]></content>
      
      
      <categories>
          
          <category> daily </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Canvas</title>
      <link href="/2019/02/20/html5-canvas/"/>
      <url>/2019/02/20/html5-canvas/</url>
      
        <content type="html"><![CDATA[<h4 id="TRACK-2-DEVIEW-2018-책에서는-맛볼-수-없는-HTML5-Canvas-이야기-​-부제-Web-Worker를-이용해-캔버스-성능을-극대화하기"><a class="header-anchor" href="#TRACK-2-DEVIEW-2018-책에서는-맛볼-수-없는-HTML5-Canvas-이야기-​-부제-Web-Worker를-이용해-캔버스-성능을-극대화하기"></a>TRACK 2 : <a href="https://deview.kr/2018/schedule/259">DEVIEW 2018 책에서는 맛볼 수 없는 HTML5 Canvas 이야기 ​(부제: Web Worker를 이용해 캔버스 성능을 극대화하기)</a></h4><blockquote><p>DEVIEW 2018 참석 후 관심있게 들었던 섹션을 정리하였습니다.</p></blockquote><ul><li>브라우저 렌더링</li><li>캔버스는 렌더링</li><li>캔버스 애니메이션 문제점</li><li>문제점 개선 방법</li><li>새로운 API</li></ul><h2 id="브라우저-렌더링"><a class="header-anchor" href="#브라우저-렌더링"></a>브라우저 렌더링</h2><p><img src="renderingElement.png" alt=""></p><p>브라우저는 크게 Rendering Engine, Javascript Engine, Graphics Library 3가지 요소로 렌더링이 처리됩니다. 대략적인 흐름은 아래와 같습니다.(브라우저 렌더링 플로우 자체는 디테일하게 다루지 않습니다. <a href="/2019/02/20/browser-rendering-optmize/">브라우저는 어떻게 화면을 그릴까?</a> 포스팅을 참고해 주세요.)</p><ol><li>Rendering Engine이 렌더링을 처리합니다.<br>(Rendering Engine은 Javascript 를 해석할 수 없습니다.)</li><li>Javascript 를 만나면 V8 에 해석 요청을 합니다.</li><li>이후 Graphics Library를 통해 화면을 그립니다.</li></ol><h2 id="캔버스-렌더링"><a class="header-anchor" href="#캔버스-렌더링"></a>캔버스 렌더링</h2><p>위 흐름을 보면 Canvas 에 무언가를 효율적으로 그리기 위해서는 HTML, CSS 보다는 Javascript 라는 것을 짐작할 수 있습니다. 실제로 캔버스 내부는 Javascript 코드로 그려지기 때문에 캔버스 렌더링은 브라우저 Rendering Engine 아닌 Javascript Engine에 의해 결정됩니다.</p><h2 id="캔버스-애니메이션-문제점"><a class="header-anchor" href="#캔버스-애니메이션-문제점"></a>캔버스 애니메이션 문제점</h2><p>다이나믹한 그래픽 처리를 위해 Canvas 가 나타났습니다. 애니메이션을 잘 처리하기 위한 목적으로 나온 태그이지만 현실은 다이나믹한 그래픽 처리에 어려움이 있습니다.</p><p><img src="canvasRender.png" alt=""></p><p>위 그림을 보면 렌더링 엔진, 자바스크립트 엔진, 그래픽스 라이브러리가 16.7ms를 넘어 처리되고 있습니다. 실제로 16.7ms 내에서 캔버스 코드가 실행되고 그림을 그려야 1프레임을 제대로 그릴 수 있지만 위 그림에서는 초과하여 실제로 프레임 드랍이 발생합니다.</p><p>프레임 드랍이 발생하지 않게 하기 위해서는 Main Thread 에서 16.7ms 안에<br>dom, javascript, painting 을 처리하고 남는 시간에 캔버스 렌더링을 시도해야 합니다. 하지만 Main Thread 는 위 그림처럼 이미 많은 일을 하고 있는 경우가 많습니다.</p><h2 id="문제점-개선-방법"><a class="header-anchor" href="#문제점-개선-방법"></a>문제점 개선 방법</h2><h3 id="브라우저-관점에서-개선"><a class="header-anchor" href="#브라우저-관점에서-개선"></a>브라우저 관점에서 개선</h3><p>Main Thread 에서 하던 일을 분담하는 방식입니다.<br><img src="drawProcess.png" alt=""></p><ol><li>Main Thread 에서는 Recording 까지만 처합니다. (그림 그리는 방법 정의합니다.)</li><li>Raster Thread 에서 생성된 Canvas layer를 bitmap 화 합니다. (전달 받은 방법에 따라 그림을 그림립니다.)</li><li>Compositor Thread 에서 bitmap 들을 합쳐 하나의 큰 그림을 그리게 합니다. (그려진 그림들을 조합 합니다.)</li></ol><h3 id="웹-개발자-관점에서-개선"><a class="header-anchor" href="#웹-개발자-관점에서-개선"></a>웹 개발자 관점에서 개선</h3><h4 id="풀-스크린으로-캔버스-렌더링하기"><a class="header-anchor" href="#풀-스크린으로-캔버스-렌더링하기"></a>풀 스크린으로 캔버스 렌더링하기</h4><p>UI에 제약이 생기지만 Canvas를 풀 스크린으로 렌더링하면 핸들링할 Target DOM 이 없기 때문에 Main Thread 자원을 더 사용할 수 있으며 GPU 가속까지 붙이면 성능을 개선할 수 있습니다. 애니메이션을 전체 화면에서 처리할 경우는 고려해볼 수 있는 선택지 입니다.</p><h4 id="Background-Canvas"><a class="header-anchor" href="#Background-Canvas"></a>Background Canvas</h4><p>프리젠테이션용, 백그라운드용 캔버스를 두개 만듭니다. 백그라운드에서 여러 오브젝트를 다 그린다음 프레젠테이션 캔버스에 백그라운드 캔버스에서 그린 오브젝트를 가져와 한번에 한번에 엎어치기 하는 방식입니다.</p><h5 id="Background-Canvas-2"><a class="header-anchor" href="#Background-Canvas-2"></a>Background Canvas</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backContext.<span class="title function_">drawRect</span>();</span><br><span class="line">backContext.<span class="title function_">drawOval</span>();</span><br><span class="line">backContext.<span class="title function_">drawTriangle</span>();</span><br></pre></td></tr></table></figure><h5 id="Presentation-Canvas"><a class="header-anchor" href="#Presentation-Canvas"></a>Presentation Canvas</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frontContext.<span class="title function_">drawImage</span>(backCanvas);</span><br></pre></td></tr></table></figure><h2 id="새로운-캔버스-API"><a class="header-anchor" href="#새로운-캔버스-API"></a>새로운 캔버스 API</h2><p>위와 같은 꼼수 없이 캔버스를 잘 그리기 위한 새로운 <a href="https://www.google.com/search?q=Offscreen+Canvas+API&amp;oq=Offscreen+Canvas+API&amp;aqs=chrome..69i57.421j0j1&amp;sourceid=chrome&amp;ie=UTF-8">API</a> 가 고안되었습니다.</p><h4 id="등장-배경"><a class="header-anchor" href="#등장-배경"></a>등장 배경</h4><ul><li>Javascript Engine과 Rendering Engine 사이의 Binding Overhead 발생<!-- (두엔진간 왔다갔다 overhead가 크다) --></li><li>GPU 가속을 사용하더라도 Skia 내부의 Overhead 발생<!-- (GPU가속 쓰더라도 CPU가 써야하는 부분에서 페인팅 라이브러리 overhead 가 크다) --><ul><li>GPU가속 쓰더라도 CPU를 써야하는 부분에서 페인팅 라이브러리 overhead 발생</li></ul></li><li>위 프로세스 처리 후 DOM Rendering 을 처리하기에도 벅찬 Main-Thread</li></ul><h4 id="요구-사항"><a class="header-anchor" href="#요구-사항"></a>요구 사항</h4><ul><li>Javascript 부하를 줄이기 위해 다른 Thread 에서 실행할 수 있으면 좋겠다.</li><li>크진 않지만 Skia 의 부하를 줄이기 위해 다른 Thread 에서 실행하면 좋겠다.</li><li>DOM Rendering 과 분리되면 좋겠다.</li></ul><h4 id="시도"><a class="header-anchor" href="#시도"></a>시도</h4><ul><li>이미 사용되고 있는 webWorker를 통하여 새로운 스레드 생성하여 처리 시도</li></ul><h4 id="이슈"><a class="header-anchor" href="#이슈"></a>이슈</h4><ul><li>webWorker 에서는 직접적으로 DOM 에 엑세스가 불가능 합니다.</li><li>캔버스가 HTML(DOM) 이기에 메인 스레드에서 분리가 불가능 합니다.<ul><li>(HTML 은 JS, CSS 등 다른 자원에서 DOM Tree 접근시 싱크가 맞아야 하는데 다른 스레드에서 처리하게 되면 싱크 이슈가 발생합니다.)</li><li>React, Vue 와 같이 Shadow DOM 을 사용하게 되면 Atomic 하게 처리할 수 있습니다.</li></ul></li></ul><h4 id="해결"><a class="header-anchor" href="#해결"></a>해결</h4><ul><li>Canvas를 DOM 에서 분리하는 새로운 offscreen canvas API 등장</li><li><strong>Offscreen Canvas API</strong><ul><li>기존의 Canvas Rendering Logic은 고치지 않고 Thread만 옮겨가서 그대로 수행할 수 있습니다.</li><li>Mozila와 크롬 69에 적용되어 있습니다.</li></ul></li></ul><h3 id="Todo-For-Main-Thread"><a class="header-anchor" href="#Todo-For-Main-Thread"></a>Todo For Main Thread</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(‘canvas’);</span><br><span class="line"><span class="keyword">const</span> offscreen = canvas.<span class="title function_">transferControlToOffscreen</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(‘canvas-worker.<span class="property">js</span>’);</span><br><span class="line">worker.<span class="title function_">postMessage</span>(&#123; <span class="attr">canvas</span>: offscreen &#125;, [offscreen]);</span><br></pre></td></tr></table></figure><h3 id="Todo-For-Worker-Thread"><a class="header-anchor" href="#Todo-For-Worker-Thread"></a>Todo For Worker Thread</h3><p>아래와 같이 워커 스레드에서 렌더링처리하면 메인 스레드의 스택과는 무관하게 렌더링 처리가 가능합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="property">onmessage</span> = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> offscreen = event.<span class="property">data</span>.<span class="property">canvas</span>;</span><br><span class="line">    <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(‘2d’);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">time</span>) &#123;</span><br><span class="line">      <span class="title function_">drawSomething</span>(context);</span><br><span class="line">      <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="기존-방식의-Canvas-사용"><a class="header-anchor" href="#기존-방식의-Canvas-사용"></a>기존 방식의 Canvas 사용</h4><p><img src="oldCanvas.png" alt=""></p><h4 id="Offscreen-Canvas-사용"><a class="header-anchor" href="#Offscreen-Canvas-사용"></a>Offscreen Canvas 사용</h4><p><img src="newCanvas.png" alt=""></p><h3 id="정리"><a class="header-anchor" href="#정리"></a>정리</h3><p>Offscreen Canvas 를 이용하면 Canvas 에 그림을 그리기 위한 로직을 Main Thread 에서 분리하여 처리할 수 있고 이를 통해 캔버스의 성능을 향상 시킬 수 있습니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>직접 해보는 Webpack 설정</title>
      <link href="/2019/02/09/webpack-config/"/>
      <url>/2019/02/09/webpack-config/</url>
      
        <content type="html"><![CDATA[<h1>Webpack</h1><p>webpack은 모던 자바스크립트 애플리케이션을 위한 정적 모듈 번들러입니다.<br>모던 애플리케이션의 경우 모듈 단위로 개발을 하는 경우가 많은데 직접 작성한 모듈 설치한 모듈들의 의존성을 파악하기란 너무나 어려운 일입니다.</p><p>저같은 경우 gulp, grunt 같은 테스크러너에 merge, minify, uglify등의 테스크를 등록하여 번들링(?) 하였었는데 테스크러너는 기본적으로는 의존성 모듈을 관리해주지 않았기 때문에 명시적으로 번들링할 대상들을 관리해줘야 한다는 불편함이 있었습니다. 때문에 개발자가 코드를 잘 작성해도 문제가 생기는등 관리 포인트가 늘어나는 아쉬운 점들이 있었습니다.</p><p>하지만 webpack은 모듈간 의존성을 스스로 파악하여 번들링해 주기 때문에 번거롭게 신경쓰지 않아도 된다는 장점이 있습니다. 그 외에도 여러가지 장점이 있겠지만 이번 포스팅에서는 webpack을 좀 더 잘 쓰기위한 주요 설정과 개인적으로 유용하다고 생각되는 몇가지 팁에 대해서 작성해 보도록 하겠습니다.</p><h2 id="Webpack-install-init"><a class="header-anchor" href="#Webpack-install-init"></a>Webpack install &amp; init</h2><p>webpack과 webpack-cli를 설치하고 기본 값 셋팅된 package.json 파일을 생성합니다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g webpack webpack-cli &amp;&amp; webpack webpack-cli -D<span class="regexp">//</span> install webpack, webpack-cli</span><br><span class="line">npm init -y <span class="regexp">//</span> generate default package.json</span><br></pre></td></tr></table></figure><p>webpack config 파일은 아래 웹팩 속성 확인 후 직접 작성해 줍니다.</p><h2 id="Webpack-Property"><a class="header-anchor" href="#Webpack-Property"></a>Webpack Property</h2><ul><li><strong>mode</strong>: 해당값에 따라 내부 최적화를 따릅니다.</li><li><strong>entry</strong>: 라이브러리 및 모듈을 로딩을 시작할 포인트 설정</li><li><strong>output</strong>: 산출물 파일명 및 파일 path 설정</li><li><strong>loader</strong>: 로더는 웹팩 번들링 시점에 중간에 개입</li><li><strong>plugins</strong>: 번들링 완료 후 마지막 output 시점에 개입</li><li><strong>resolve</strong>: 모듈로딩 관련 옵션 설정, 모듈 해석방식 정의(alias등)</li><li><strong>devtool</strong>: 디버깅을 위한 소스맵 제공</li><li><strong>devServer</strong>: 빌드를 위한 개발 서버</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;&#125;, <span class="comment">// loader</span></span><br><span class="line">    <span class="attr">plugins</span>: [] <span class="comment">// &#123;array&#125;,</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Webpack-Command-Line"><a class="header-anchor" href="#Webpack-Command-Line"></a>Webpack Command Line</h2><ul><li>webpack: 빌드 기본명령(개발용)</li><li>webpack -p: minification 기능이 들어간 빌드(주로 배포용)</li><li>webpack -watch (-w): 개발에서 빌드할 파일의 변화를 감지</li><li>webpack -d: sourcemap 포함 빌드</li><li>webpack --display-error-details: error 발생시 디버깅 정보를 상세히 출력</li><li>webpack --optimize-minimize --define process.env.NODE_ENV=“‘production’”: 배포용</li></ul><!--webpack config watch 옵션모듈 코드가 아닌 webpack 설정에 해당하는 파일의 변경이 일어나면 자동으로 번들링을 진행 webpack --progress --watch ornpm i serve -D 후 package.json에 아래처럼 설정 가능 "scripts": { "start":"server" }--><h2 id="Mode"><a class="header-anchor" href="#Mode"></a><a href="https://webpack.js.org/concepts/mode/">Mode</a></h2><p>번들링시 mode에 따른 built-in 최적화를 수행합니다. process.env.NODE_ENV 를 설정해도 mode를 자동으로 set 해주지는 않으며 기본값으로 ‘production’ 모드를 가집니다.</p><h4 id="Example"><a class="header-anchor" href="#Example"></a>Example</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="table__custom"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td>development</td><td>process.env.NODE_ENV 를 development 으로 설정합니다. NamedChunksPlugin,NamedModulesPlugin 활성화 합니다</td></tr><tr><td>production</td><td>process.env.NODE_ENV 를 production 으로 설정합니다. FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 및 TerserPlugin을 사용합니다.</td></tr><tr><td>none</td><td>기본 최적화 옵션 사용</td></tr></tbody></table></div><h2 id="Entry"><a class="header-anchor" href="#Entry"></a><a href="https://webpack.js.org/concepts/entry-points/">Entry</a></h2><p>라이브러리 및 모듈을 로딩을 시작할 엔트리 포인트입니다.<br>아래와 같이 <code>string</code>, <code>array</code>, <code>object</code> 방식으로 선언이 가능하며 object 타입으로 선언한 경우 output 설정시 <code>[name]</code>이라는 속성으로 엔트리의 키값을 참조할 수 있습니다.</p><h4 id="string"><a class="header-anchor" href="#string"></a>string</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    etnry : <span class="string">&#x27;string.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="array"><a class="header-anchor" href="#array"></a>array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry : [<span class="string">&#x27;array.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="object"><a class="header-anchor" href="#object"></a>object</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry : &#123;</span><br><span class="line">        <span class="attr">app</span>: <span class="string">&#x27;./src/app.js&#x27;</span>, <span class="comment">// 잦은배포</span></span><br><span class="line">        <span class="attr">vendors</span>: <span class="string">&#x27;./src/vendors.js&#x27;</span> <span class="comment">// 버전업 잘 없는 경우</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    entry : &#123;</span><br><span class="line">        <span class="attr">page1</span>: <span class="string">&#x27;./src/page1/index.js&#x27;</span>,</span><br><span class="line">        <span class="attr">page2</span>: <span class="string">&#x27;./src/page2/index.js&#x27;</span>,</span><br><span class="line">        <span class="attr">vendors</span>: <span class="string">&#x27;./src/vendors.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Output"><a class="header-anchor" href="#Output"></a><a href="https://webpack.js.org/concepts/output/">Output</a></h2><p>빌드 산출물의 경로와 파일명을 설정합니다. <code>name</code>, <code>hash</code>, <code>chunkhash</code> 속성을 사용할 수 있습니다.</p><h4 id="output-option"><a class="header-anchor" href="#output-option"></a>output option</h4><ul><li><strong>name</strong>: 엔트리 명에 따른 output</li><li><strong>hash</strong>: webpack build에 따른 output</li><li><strong>chunkhash</strong>: chunk에 따른 output</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/home/cdn/assets/[hash]&#x27;</span>, <span class="comment">// 빌드된 번들 파일이 위치할 파일의 절대 경로</span></span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;http://script.auction.co.kr/assets/[hash]/&#x27;</span>, <span class="comment">// 브라우저가 참고할 번들링 결과 파일의 URL주소(CDN 호스트) 반드시 앞뒤 / 추가해 줘야합니다.</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span> <span class="comment">// entry의 key name =&gt; name 으로 참조 됩니다.       </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Loader"><a class="header-anchor" href="#Loader"></a><a href="https://webpack.js.org/concepts/loaders/">Loader</a></h2><p>번들링 시점에 특정 동작을 처리하기 위해 사용됩니다. 번들링 완료 후가 아닌 중간에 개입한다는 특성을 가지고 있습니다. (Loader는 module 이라는 속성명으로 사용됩니다.)</p><h4 id="Array-String"><a class="header-anchor" href="#Array-String"></a>Array[String]</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/regExp/</span>, <span class="comment">// regExp</span></span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;loader name&#x27;</span>] <span class="comment">// &#123;string&#125; loader name list</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a class="header-anchor" href="#Example-2"></a>Example</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.png$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;url-loader?limit=1&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Array-string-expose-imports-loader"><a class="header-anchor" href="#Array-string-expose-imports-loader"></a>Array[string] (expose, imports loader)</h4><ul><li><a href="https://github.com/webpack-contrib/expose-loader">expose-loader</a></li><li><a href="https://github.com/webpack-contrib/imports-loader">imports-loader</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/backbone/</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;expose-loader?Backbone&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;import-loader?_=underscore,jquery&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Array-Object"><a class="header-anchor" href="#Array-Object"></a>Array[Object]</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/regExp/</span>, <span class="comment">// regExp</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;loader name&#x27;</span>, <span class="comment">// &#123;string&#125; loader name</span></span><br><span class="line">                    <span class="attr">options</span>: &#123;&#125; <span class="comment">// &#123;object&#125; option object</span></span><br><span class="line">                &#125;</span><br><span class="line">            ] </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-3"><a class="header-anchor" href="#Example-3"></a>Example</h4><blockquote><p>babel-loader 케이스</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="comment">// &#123;string&#125; loader name</span></span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&#x27;es2015&#x27;</span>, </span><br><span class="line">                                <span class="string">&#x27;react&#x27;</span>, </span><br><span class="line">                                &#123;<span class="attr">modules</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ] <span class="comment">// babel 플러그인 리스트</span></span><br><span class="line">                    &#125; <span class="comment">// &#123;object&#125; option object</span></span><br><span class="line">                &#125;</span><br><span class="line">            ] <span class="comment">// &#123;object&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plugin"><a class="header-anchor" href="#Plugin"></a><a href="https://webpack.js.org/concepts/plugins/">Plugin</a></h2><p>파일별 커스텀 기능을 사용하기 위해서 사용하며 번들링 완료 후 마지막 output 시점에 개입한다는 특성이 있습니다.</p><h4 id="Array"><a class="header-anchor" href="#Array"></a>Array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [] <span class="comment">// &#123;array&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-4"><a class="header-anchor" href="#Example-4"></a>Example</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">UglifyJsPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">            <span class="attr">$</span>: <span class="string">&#x27;jquery&#x27;</span> </span><br><span class="line">        &#125;), </span><br><span class="line">        <span class="comment">// 모든 모듈에서 사용할 수 있도록 해당 모듈을 변수로 변환한다.</span></span><br><span class="line">        <span class="comment">// 즉 각 모듈(파일)에서 매번 import할 필요 없이 해당 변수를 통하여 참조가능</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">            <span class="attr">PRODUCTION</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">true</span>),</span><br><span class="line">            <span class="attr">VERSION</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;5fa3b9&#x27;</span>),</span><br><span class="line">            <span class="attr">BROWSER_SUPPORTS_HTML5</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">TWO</span>: <span class="string">&#x27;1+1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;typeof window&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 웹팩 번들링 시작하는 시점에 사용 가능한 상수값 정의 가능</span></span><br><span class="line">        <span class="comment">// 개발계, 테스트계에 따라 다른 설정 적용시 유용하다.</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ManifestPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">fileName</span>: <span class="string">&#x27;manifest.json&#x27;</span>,</span><br><span class="line">            <span class="attr">basePath</span>: <span class="string">&#x27;./dist/&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 번들링시 생성되는 코드에 대한 정보들을 json 파일 안에 담아줘 라이브러리들간 의존성 파악 용의</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resolve"><a class="header-anchor" href="#Resolve"></a><a href="https://webpack.js.org/configuration/resolve/">Resolve</a></h2><p>webpack을 좀 더 편리하게 사용할 수 있게 해주는 옵션이라고 보시면 됩니다. 다양한 옵션을 추가로 사용할 수 있지만 간략하게 <code>alias</code>, <code>modules</code> 두가지 옵션만 알아보도록 하겠습니다. 좀 더 자세한 옵션 목록과 사용법은 <a href="https://webpack.js.org/configuration/resolve/">Resolve 가이드</a>를 참고해 주세요.</p><h4 id="alias"><a class="header-anchor" href="#alias"></a>alias</h4><p>실제 모듈 Path가 아닌 alias에서 선언한 모듈 Path로 로딩이 가능합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="title class_">Utilities</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/path/utilities/&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 기존 모듈 로딩</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Utility</span> <span class="keyword">from</span> <span class="string">&#x27;../../src/path/utilities/utility&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve alias option 설정 시 모듈 로딩</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Utility</span> <span class="keyword">from</span> <span class="string">&#x27;Utilities/utility&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="modules"><a class="header-anchor" href="#modules"></a>modules</h4><p>require, import 등 모듈 로딩시에 기준이되는 폴더를 설정할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">modules</span>: [<span class="string">&#x27;node_modules&#x27;</span>] <span class="comment">// defaults</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">modules</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>), <span class="string">&#x27;node_modules&#x27;</span>] <span class="comment">// src/node_modules</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Devtool"><a class="header-anchor" href="#Devtool"></a><a href="https://webpack.js.org/configuration/devtool/">Devtool</a></h2><p>디버깅을 위한 소스맵을 제공하며 소스맵 스타일을 정할 수 있습니다. build, rebuild 속도에 영향을 줄 수 있는 옵션입니다. 자세한 소스맵 스타일 값은 <a href="https://webpack.js.org/configuration/devtool/">devtool 가이드</a>를 확인해 주세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;#inline-source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DevServer"><a class="header-anchor" href="#DevServer"></a><a href="https://webpack.js.org/configuration/dev-server">DevServer</a></h2><h3 id="webpack-dev-server"><a class="header-anchor" href="#webpack-dev-server"></a>webpack-dev-server</h3><p>devServer를 사용하여 빌드를 위한 개발 서버를 구성할 수 있습니다. webpack 자체에서 제공하는 개발 서버로 빠른 리로딩 기능을 제공하며 번들된 파일은 in memory에 올라가기 때문에 가시적으로 볼 수 없습니다. 프로토타이핑이 끝나고 배포할 때 실제 bundle 파일이 생성됩니다.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-<span class="keyword">server</span> -D</span><br></pre></td></tr></table></figure><h4 id="Example-5"><a class="header-anchor" href="#Example-5"></a>Example</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/assets&#x27;</span>, <span class="comment">// 절대경로로 지정하고 항상 /를 앞뒤에 붙여야 한다. </span></span><br><span class="line">        <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 서버가 로딩할 static 파일 경로</span></span><br><span class="line">        <span class="comment">// contentBase: false, // 비활성화</span></span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// gzip 압축 방식을 이용하여 웹 자원의 사이즈를 줄인다.</span></span><br><span class="line">        <span class="comment">// 파일을 줄이는게 아니라 서버와 클라이언트간 압축방식 정의</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">9000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Run-server-with-cli"><a class="header-anchor" href="#Run-server-with-cli"></a>Run server with cli</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-<span class="keyword">server</span> <span class="comment">--open</span></span><br></pre></td></tr></table></figure><h4 id="Run-server-with-script"><a class="header-anchor" href="#Run-server-with-script"></a>Run server with script</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure><hr><h1>Webpack 사용시 알아두면 좋은 TIP</h1><h2 id="Webpack-빌드를-위한-개발-서버-구성"><a class="header-anchor" href="#Webpack-빌드를-위한-개발-서버-구성"></a>Webpack 빌드를 위한 개발 서버 구성</h2><p>앞서 언급된 devServer를 이용하는 방법도 있지만 이미 서버가 구성된 경우에는 webpack을 미들웨어로 구성하여 서버와 연결할 수 있습니다.</p><h3 id="webpack-dev-middleware"><a class="header-anchor" href="#webpack-dev-middleware"></a>webpack-dev-middleware</h3><p>기존에 구성한 서버에 weback 에서 컴파일한 파일을 전달하는 middleware wrapper로 webpack에 설정한 파일을 변경시, 파일에 직접 변경 내역을 저장하지 않고 메모리 공간을 활용합니다. (변경된 파일내역을 파일 디렉토리 구조안에서는 확인이 불가능합니다.)</p><h4 id="Install-3"><a class="header-anchor" href="#Install-3"></a>Install</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i express webpack-dev-middleware -D</span><br></pre></td></tr></table></figure><h4 id="Example-6"><a class="header-anchor" href="#Example-6"></a>Example</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webapck = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="title function_">requrie</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> compiler = <span class="title function_">webpack</span>(webpackConfig);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">webpackDevMiddleware</span>(compiler, &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: webpackConfig.<span class="property">output</span>.<span class="property">publicPath</span>, <span class="comment">// 일반적으 output에 설정한 publicPath 사용</span></span><br><span class="line">    <span class="attr">stats</span>: &#123;<span class="attr">colors</span>: <span class="literal">true</span>&#125;, <span class="comment">// 번들링 시 webpack 로그 컬러 하이라이팅</span></span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span> <span class="comment">// entry point에 네트워크 요청이 있을 때만 컴파일 다시함</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Gulp-연동"><a class="header-anchor" href="#Gulp-연동"></a>Gulp 연동</h2><p>webpack 에서도 많은 기능을 제공하지만 테스크러너와 연동이 필요한 경우도 있을 수 있습니다. 아래와같이 pipeline 중간에 웹팩 설정을 넣어주면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack-stream&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&#x27;src/entry.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">webpack</span>(webpackConfig)) <span class="comment">// 걸프 테스크 중간에 웹팩 추가</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="모듈내-라이브러리-중복-로딩되지-않도록-처리하기"><a class="header-anchor" href="#모듈내-라이브러리-중복-로딩되지-않도록-처리하기"></a>모듈내 라이브러리 중복 로딩되지 않도록 처리하기</h2><p>아래 코드경우 개별 모듈에서 moment, lodash 를 import 하면 main.js와 vendor.js 번들파일에 중복으로 말리게 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./app/index.js&#x27;</span>,</span><br><span class="line">        <span class="attr">vendor</span>: [</span><br><span class="line">            <span class="string">&#x27;moment&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">// main.js, vendor.js</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProvidePlugin</code> 으로 moment, lodash 모듈을 전역으로 빼고 import하지 않는 방법도 있지만 <code>CommonsChunkPlugin</code> 플러그인을 사용하여 공통 모듈이 중복 로딩되지 않도록 처리할 수 도 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./app/index.js&#x27;</span>,</span><br><span class="line">        <span class="attr">vendor</span>: [</span><br><span class="line">            <span class="string">&#x27;moment&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>, <span class="comment">// main.js, vendor.js</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span> <span class="comment">// output bundle file name</span></span><br><span class="line">            <span class="comment">// or</span></span><br><span class="line">            <span class="attr">names</span>: [<span class="string">&#x27;vendor&#x27;</span>, <span class="string">&#x27;manifest&#x27;</span>] <span class="comment">// 매 번들시 번들파일에 웹팩 초기화 하는 부트스트랩 코드가 들어가는데 manifest.js 그 부분까지 분리해 낼 수 있다. 매번 번들되는 코드의 양을 좀 더 줄일 수 있다.</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// and 번들된 파일 관리 목록 json</span></span><br><span class="line">        <span class="comment">// npm i webpack-manifest-plugin --save-dev</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ManifestPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">fileName</span>: <span class="string">&#x27;manifest.json&#x27;</span>,</span><br><span class="line">            <span class="attr">basePath</span>: <span class="string">&#x27;./dist/&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="join-resolve-차이점"><a class="header-anchor" href="#join-resolve-차이점"></a>join, resolve 차이점</h2><p>webpack config 작성이나 nodejs 작업시 join, resolve를 많이 접할 수 있습니다. 개인적으로 헷갈렸던 두 메소드의 차이점에 대해서 확인해 보겠습니다.</p><h4 id="path-join"><a class="header-anchor" href="#path-join"></a><code>path.join()</code></h4><p>OS의 파일 구분자를 이용하여 파일 위치를 조합합니다. OS의 파일 구분자를 이요하기 때문에 결과값이 OS에 따라 달라짐에 유의해야합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz/asdf&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;/foo/bar/baz/asdf&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="path-resolve"><a class="header-anchor" href="#path-resolve"></a><code>path.resolve()</code></h4><p>join()의 경우 문자열을 합치기만 하지만 resolve()는 오른족에서 왼쪽으로 파일 위치를 구성해가며 유효한 위치를 찾습니다. 만약 결과 값이 유효하지 않으면 현재 디렉토리가 사용되며 반환되는 위치 값은 항상 absolute URL 이고 absolute URL이 만들어 지면 종료됩니다.<br>파라미터에 들어온 유효하지 않은 path 까지 알아서 제거해 주기 때문에 항상 유효한 path만 받을 수 있다는 장점이 있습니다.</p><!-- 필요없는 값 제외되고 유효한 폴더로만 위치 값 구성으로 검증된 폴더 위치를 잡아준다 --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, <span class="string">&#x27;./baz&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;/foo/bar/baz&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, <span class="string">&#x27;/tmp/file/&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;/tmp/file&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;static_files/png/&#x27;</span>, <span class="string">&#x27;../gif/image.gif&#x27;</span>);</span><br><span class="line"><span class="comment">// 현재 폴더 위치가 /home/myself/node 라면</span></span><br><span class="line"><span class="comment">// &#x27;/home/myself/node/wwwroot/static_files/gif/image.gif&#x27;</span></span><br></pre></td></tr></table></figure><h1>정리</h1><p>webpack 주요 설정 속성과 몇가지 팁에 대해서 알아봤습니다. zero configuration 이 트렌드가 되는 요즘 configpack 이라는 놀림을 받고 있는 webpack 이지만 점점 더 좋아질 것으로 생각합니다. 지금도 react나 vue를 위한 설정은 cli로 아무런 설정없이 바로 사용이 가능하며 custom을 위해 eject를 사용하는 방법도 있습니다.</p><p>설정 없이 자동으로 된다 해도 아직까지는 설정에 대한 학습이 필수라고 생각하기 때문에. 가장 정리가 잘 되어있고 친절한 <a href="https://webpack.js.org/concepts/">webpack.js.org</a>를 자주 열어보고 학습하는 것을 추천드립니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> bundler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 에서 Sequelize 사용하기</title>
      <link href="/2019/02/08/sequelize-for-nodejs/"/>
      <url>/2019/02/08/sequelize-for-nodejs/</url>
      
        <content type="html"><![CDATA[<h1>Sequelize</h1><p><code>Sequelize</code>는 Node에서 데이터베이스 접속시 편리하게 작업할 수 있도록 도와주는 라이브러리입니다. <code>ORM</code>(Object-relational Mapping)으로 자바스크립트 객체와 데이터베이스 릴레이션을 맵핑해 주고 자바스크립트 구문을 알아서 SQL로 바꾸어 질의하기 때문에 SQL 문법을 몰라도 데이터베이스를 다룰 수 있게 도와줍니다. 더욱이 <code>MySql, MariaDB, PostgreSQL, SQLite, MSSQL</code>등 다른 데이터베이스도 같이 쓸 수 있기 때문에 유용하게 활용할 수 있습니다.</p><h2 id="Sequelize-설치"><a class="header-anchor" href="#Sequelize-설치"></a>Sequelize 설치</h2><p><code>Sequelize</code>와 <code>mysql</code>을 설치하고 sequelize 커맨드를 사용하기위해 <code>sequelize-cli</code> 를 전역으로 설치합니다. 설치 완료후 <code>sequelize init</code> 명령어를 실행해 줍니다.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i sequelize mysql2</span><br><span class="line"><span class="built_in">npm</span> i -g sequelize-cli</span><br><span class="line">sequelize init</span><br></pre></td></tr></table></figure><h2 id="Model-생성"><a class="header-anchor" href="#Model-생성"></a>Model 생성</h2><p><code>sequelize init</code> 명령으로 생성된 <code>models/</code> 폴더에 <code>sequelize.define</code> 메소드를 사용하여 mysql table과 대응되는 sequelize model을 추가해 줍니다.</p><blockquote><p>sequelize는 기본적으로 model이름은 단수로 생성하며, 단수 모델명의 복수형 이름을 테이블 명으로 사용합니다. 그리고 id를 기본키로 연결하므로 id컬럼을 추가할 필요는 없습니다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize.<span class="title function_">define</span>(<span class="string">&#x27;modelName&#x27;</span>, column, option);</span><br></pre></td></tr></table></figure><h4 id="models-user-js"><a class="header-anchor" href="#models-user-js"></a>models/user.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">&#123;sequelize, DataTypes = Sequelize&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sequelize.<span class="title function_">define</span>(</span><br><span class="line">        <span class="comment">// model name</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">        <span class="comment">// column</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="title function_">STRING</span>(<span class="number">20</span>),</span><br><span class="line">                <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">age</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">INTEGER</span>.<span class="property">UNSIGNED</span>,</span><br><span class="line">                <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">created_at</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">DATE</span>,</span><br><span class="line">                <span class="attr">allowNull</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">defalutValue</span>: sequelize.<span class="title function_">literal</span>(<span class="string">&#x27;now()&#x27;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// options</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">timestamps</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="dataType"><a class="header-anchor" href="#dataType"></a>dataType</h4><blockquote><p>sequelize.define를 사용하여 column 선언시 속성의 dataType은 SQL문 dataType과는 조금 다른 이름으로 선언합니다.</p></blockquote><ul><li>VARCHAR: <strong>STRING</strong></li><li>INT: <strong>INTEGER</strong></li><li>UNSIGNED 옵션이 적용된 INT: <strong>INTEGER.UNSIGNED</strong></li><li>ZEROFILL옵션: <strong>INTEGER.UNSIGNED.ZEROFILL</strong></li><li>TINYINT: <strong>BOOLEAN</strong></li><li>DATETIME: <strong>DATE</strong></li><li>NOT NULL: <strong>allowNull</strong></li><li>UNIQUE: <strong>UNIQUE</strong></li><li>기본값: <strong>defaultValue</strong></li></ul><h4 id="options"><a class="header-anchor" href="#options"></a>options</h4><ul><li><strong>timestamps</strong>: true 일 경우 createdAt, updatedAt 컬럼을 자동으로 추가하고 row가 생성, 수정될 때 시간이 자동으로 입력됩니다.</li><li><strong>paranoid</strong>: timestamps 가 true 경우에만 사용가능합니다. deletedAt 이라는 컬럼이 추가되며 row 삭제하는 sequelize 명령 내릴 경우 deletedAt에 제거 날짜를 입력합니다.</li><li><strong>underscored</strong>: sequelize가 자동으로 생성해주는 컬럼명을 스네이크 형식으로 변경합니다. createdAt, updatedAt, deletedAt 컬럼을 각각 created_at, updated_at, deleted_at으로 변경해 줍니다.</li><li><strong>tableName</strong>: sequelize는 자동으로 define 메소드 첫번째 인자(모델명)를 복수형으로 만들어 테이블명으로 사용합니다. 테이블 명을 다른 것으로 지정하고 싶을 때 해당 옵션을 사용합니다.</li></ul><h2 id="Model-간-관계-선언"><a class="header-anchor" href="#Model-간-관계-선언"></a>Model 간 관계 선언</h2><p>아래 메소드들을 사용하여 table에 해당하는 model간 관계를 맺어줍니다.</p><blockquote><p><a href="http://docs.sequelizejs.com/class/lib/associations/base.js~Association.html">doc associations</a></p></blockquote><ul><li><strong>HasOne</strong>: One-to-one association</li><li><strong>HasMany</strong>: One-to-many association</li><li><strong>BelongsTo</strong>: One-to-one association</li><li><strong>BelongsToMany</strong>: Many-to-many association with a join table.</li></ul><h4 id="1-1"><a class="header-anchor" href="#1-1"></a>1:1</h4><p>1:1 경우 hasOne, belongTo가 반대여도 상관없습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">User</span>.<span class="title function_">hasOne</span>(db.<span class="property">Info</span>, &#123; <span class="attr">foreginKey</span>:<span class="string">&quot;user_id&quot;</span>, <span class="attr">sourceKey</span>:<span class="string">&quot;id&quot;</span>&#125;);</span><br><span class="line">db.<span class="property">Info</span>.<span class="title function_">belongTo</span>(db.<span class="property">User</span>, &#123; <span class="attr">foreginKey</span>:<span class="string">&quot;user_id&quot;</span>, <span class="attr">tarketKey</span>:<span class="string">&quot;id&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="1-N"><a class="header-anchor" href="#1-N"></a>1:N</h4><p>foreginKey 를 사용하여 관계를 맺어줄 경우 hasMany는 sourceKey, belongTo는 targetKey를 사용합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">hasMany</span>(<span class="title class_">Comment</span>, &#123; <span class="attr">foreginKey</span>:<span class="string">&quot;commenter&quot;</span>, <span class="attr">sourceKey</span>: <span class="string">&quot;id&quot;</span>&#125;); </span><br><span class="line"><span class="title class_">Comment</span>.<span class="title function_">belongTo</span>(<span class="title class_">User</span>, &#123; <span class="attr">foreginKey</span>:<span class="string">&quot;commenter&quot;</span>, <span class="attr">targetKey</span>: <span class="string">&quot;id&quot;</span>&#125;); <span class="comment">// User 모델의 id를 Comment 모델의 commenter 컬럼에 넣습니다.</span></span><br></pre></td></tr></table></figure><h4 id="N-M"><a class="header-anchor" href="#N-M"></a>N:M</h4><p>새로운 릴레이션으로 사용될 이름을 through 속성의 값으로 넣어줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Post</span>.<span class="title function_">belongToMany</span>(<span class="title class_">HashTag</span>, &#123; <span class="attr">through</span>:<span class="string">&quot;PostHashTag&quot;</span>&#125;);</span><br><span class="line"><span class="title class_">HashTag</span>.<span class="title function_">belongToMany</span>(<span class="title class_">Post</span>, &#123; <span class="attr">through</span>:<span class="string">&quot;PostHashTag&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="설정-및-데이터베이스-연동"><a class="header-anchor" href="#설정-및-데이터베이스-연동"></a>설정 및 데이터베이스 연동</h2><h4 id="config-config-json"><a class="header-anchor" href="#config-config-json"></a>config/config.json</h4><blockquote><p>데이터베이스 연동을 위한 정보를 담을 config 파일을 생성합니다.</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodejs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dialect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;operatorsAliases&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span> <span class="comment">// 보안에 취약한 연산자를 사용할지 여부</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="models-index-js"><a class="header-anchor" href="#models-index-js"></a>models/index.js</h4><blockquote><p><code>sequelize init</code> 명령으로 생성된 <code>models/index.js</code> 파일을 열어 수정합니다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sequelize</span> = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> env = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> || <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../confing/config&#x27;</span>)[env];</span><br><span class="line"><span class="keyword">const</span> db = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> <span class="title class_">Sequelize</span>(</span><br><span class="line">    config.<span class="property">database</span>, </span><br><span class="line">    config.<span class="property">username</span>, </span><br><span class="line">    config.<span class="property">password</span>, </span><br><span class="line">    config</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">db.<span class="property">sequelize</span> = sequelize;</span><br><span class="line">db.<span class="property">Sequelize</span> = <span class="title class_">Sequelize</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// model 정의</span></span><br><span class="line">db.<span class="property">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;./user&#x27;</span>)(db); <span class="comment">// user model </span></span><br><span class="line">db.<span class="property">Post</span> = <span class="built_in">require</span>(<span class="string">&#x27;./post&#x27;</span>)(db); <span class="comment">// post model</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// model간 관계 선언</span></span><br><span class="line">db.<span class="property">User</span>.<span class="title function_">hasMany</span>(db.<span class="property">Post</span>);</span><br><span class="line">db.<span class="property">Post</span>.<span class="title function_">belongsTo</span>(db.<span class="property">User</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = db;</span><br></pre></td></tr></table></figure><p><code>model/index.js</code> 에서 <code>config.json</code> 파일을 불러와 sequelize 인스턴스를 생성하고 정의된 <code>model</code>간 관계를 선언합니다.</p><h4 id="app-js"><a class="header-anchor" href="#app-js"></a>app.js</h4><blockquote><p><code>sequelize.sync()</code> 메소드를 호출하여 데이터베이스완 연동합니다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">&#x27;./models&#x27;</span>).<span class="property">sequelize</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">sequelize.<span class="title function_">sync</span>();</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a class="header-anchor" href="#CRUD"></a>CRUD</h2><blockquote><p>findAll, destroy, update 같은 메소드들을 사용하여 database에 질의할 수 있습니다. 좀 더 자세한 사용은 아래 링크를 참조해 주세요.<br><a href="http://docs.sequelizejs.com/manual/tutorial/querying.html">doc querying</a></p></blockquote><h4 id="조회-Option-객체"><a class="header-anchor" href="#조회-Option-객체"></a>조회 Option 객체</h4><ul><li>attribute</li><li>where</li><li>order</li><li>limit : // find 메소드랑 동일</li><li>offset</li></ul><h4 id="Sequelize-Op-연산자"><a class="header-anchor" href="#Sequelize-Op-연산자"></a>Sequelize Op 연산자</h4><ul><li><a href="http://Op.gt">Op.gt</a> : 초과</li><li>Op.gte : 이상</li><li><a href="http://Op.lt">Op.lt</a> : 미만</li><li>Op.lte : 이하</li><li><a href="http://Op.ne">Op.ne</a>: 같지않음</li><li>Op.or: 또는</li><li><a href="http://Op.in">Op.in</a>: 배열 요소중 하나</li><li>Op.notln: 배열 요소와 모두 다름</li></ul><blockquote><p>Controller 사용 예</p></blockquote><h4 id="routes-index-js"><a class="header-anchor" href="#routes-index-js"></a>routes/index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models&#x27;</span>).<span class="property">User</span>;</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_">async</span>(req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;viewTemplate&#x27;</span>, &#123;users&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">next</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h3 id="READ"><a class="header-anchor" href="#READ"></a>READ</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">User</span>, <span class="title class_">Sequelize</span>: &#123; <span class="title class_">Op</span> &#125; &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../models&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SELECT * FROM db.users LIMIT 1;</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123;&#125;) </span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findAll</span>(&#123;</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SELECT * FROM db.users;</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findAll</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SELECT name, married FROM db.users;</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findAll</span>(&#123;</span><br><span class="line">    <span class="attr">attribute</span>: [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;married&#x27;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SELECT name, married FROM db.users WHERE married=1 AND age &gt; 30 ORDER BY age DESC;</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findAll</span>(&#123;</span><br><span class="line">    <span class="attr">attribute</span>: [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;married&#x27;</span>],</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">married</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">age</span>:&#123; [<span class="title class_">Op</span>.<span class="property">gt</span>]: <span class="number">30</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">order</span>: [[<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;DESC&#x27;</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SELECT name, married FROM db.users WHERE married=0 OR age &gt; 30 ORDER BY age DESC;</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findAll</span>(&#123;</span><br><span class="line">    <span class="attr">attribute</span>: [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;married&#x27;</span>],</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        [<span class="title class_">Op</span>.<span class="property">or</span>]: [&#123; <span class="attr">married</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">age</span>: &#123; [<span class="title class_">Op</span>.<span class="property">gt</span>]: <span class="number">30</span> &#125; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">order</span>: [[<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;DESC&#x27;</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>N:M 관계에서 테이블 조회(get, set, add + 모델명의 복수형 메소드 사용 가능)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">async</span>(req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> tag = <span class="keyword">await</span> <span class="title class_">HashTag</span>.<span class="title function_">find</span>(&#123; <span class="attr">where</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;dev&quot;</span> &#125; &#125;);</span><br><span class="line">    <span class="keyword">const</span> post = <span class="keyword">await</span> tag.<span class="title function_">getPosts</span>(); <span class="comment">// get + 모델명의 복수형</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a class="header-anchor" href="#UPDATE"></a>UPDATE</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UPDATE db.users SET column=&quot;바꿀내용&quot; WHERE id=2;</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">column</span>: <span class="string">&quot;바꿀내용&quot;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">### <span class="variable constant_">DELETE</span></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">// DELETE FROM db.users WHERE id=2;</span></span><br><span class="line"><span class="string">User.destroy(&#123;</span></span><br><span class="line"><span class="string">    where: &#123; id: 2 &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>Sequelize는 ORM으로써 편리하게 사용할 수 있지만 모델링 및 SQL 문에 대한 이해를 가지고 사용하는 것이 좋을 것 같습니다. 좀 더 자세한 사용법은 <a href="http://docs.sequelizejs.com/">Sequelize API</a> 문서를 참고해 주세요.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> sequelize </tag>
            
            <tag> orm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>웹 개발자라면 반드시 알아야 할 HTTP Status</title>
      <link href="/2019/01/27/HTTP-Status/"/>
      <url>/2019/01/27/HTTP-Status/</url>
      
        <content type="html"><![CDATA[<h1>HTTP</h1><p>HTTP 상태값에 대해서 알아보기 전에 간략하게 HTTP에 대해 알아보겠습니다.</p><p>HTTP는 네트워크 상에서 컴퓨터(클라이언트/서버)와 컴퓨터(서버/클라이언트)간에 TCP/IP를 이용해 데이터를 주고받는 프로토콜로 FTP, Telnet과는 다르게 연결 상태를 유지하지 않는다는 특징을 가지고 있습니다. 클라이언트의 요청으로 서버에 리퀘스트를 날리고 서버에서 이에대한 응답을 전송하면 연결을 종료합니다.</p><p>이러한 특성으로 인해 HTTP로 상태를 유지(확인)하기 위한 방법으로는 Cookie, Session을 활용하는 방법이 있습니다. 클라이언트에서 리퀘스트를 날릴때 setCookie로 쿠키를 요청하면 리스폰스에서 해당요청에 대한 SessionID를 쿠키에 구워보내줍니다. 다음번 리퀘스트에서는 getCookie로 해당 SessionID를 서버에 보내고 이를 통해서 상태를 유지하는 방법이 있습니다.</p><p>HTTPS를 사용하지 않을경우 공격자에 의해 해당 정보가 유출될 수 있으므로 중요한 정보는 HTTPS를 사용하는게 좋습니다.</p><h1>HTTP Status</h1><ul><li><strong>200 성공</strong></li><li><strong>3xx 리다이렉트</strong></li><li><strong>4xx 클라이언트 리퀘스트 에러</strong><br>400 bad 리퀘스트로 리퀘스트 구문에러 리퀘스트구문 재 확인<br>401 인증필요<br>403 파일 퍼미션이나 액세스 권한<br>404 not found</li><li><strong>5xx 서버에러</strong><br>500 리퀘스트 처리 도중 에러, 일시적일 수 도 있음<br>503 서버 과부하, 점검등 이유로 리퀘스트 처리할 수 없는 상태</li></ul><p>200이 떨어지더라도 원하는 데이터를 받지 못할 경우도 있습니다.<br>http status 를 활용할지 리스폰스 데이터에 구분할 상태값을 포함하여 처리할지는 프론트, 백엔드 개발자간 커뮤니케이션을 통하여 정의해야 합니다.</p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>알아두면 도움이 되는 Git 명령어</title>
      <link href="/2019/01/25/git-commands-line/"/>
      <url>/2019/01/25/git-commands-line/</url>
      
        <content type="html"><![CDATA[<p>현실 세계에 시간 여행이 가능한 마법이 있다면 사람들은 전 재산을 걸어서라도 배우려고 할 것 입니다. 하지만 개발자라면 전 재산을 걸 필요가 없죠. git 을 알고 있다면 얼마든지 시간여행을 할 수 있습니다.</p><p>해당 포스트 에서는 git 사용간 알아두면 유용한 Git Commands Line 에 대해 다룹니다. 개인적으로 필요한 부분만 정리해 두었기 때문에 자세한 내용은 <a href="https://git-scm.com/book/ko/v2">git-scm.com/book/ko/v2</a>를 참조해 주세요.</p><h1>용어정리</h1><ul><li><strong>HEAD</strong> : 현재 브랜치를 가르키는 포인터로, 현재 브랜치 마지막 커밋의 스냅샷 이라고 생각하시면 됩니다.</li><li><strong>체크섬</strong> : Git에서 체크섬은 SHA-1 해시를 사용하여 만들어진 40자 길이의 16진수 문자열(<code>1f05a945f06e84c32232d4eb7305b9eecd22df4c</code>)입니다. 파일의 내용이나 디렉토리 구조를 이용하여 체크섬을 구합니다.</li><li><strong>Fast Forward</strong> : Fast Forward는 Merge할 브랜치가 가리키는 commit이 현재의 (기준)브랜치보다 앞선(뭔가가 더 수정된) commit이기 때문에 현재 브랜치의 최신 커밋(HEAD)이 merge할 브랜치의 최신 커밋을 가르키는 merge를 말합니다.</li><li><strong>Non Fast Forward</strong> : master(기준)브랜치가 merge할 브랜치가 생성된 시점 이후로 새로운 commit이 발생하여 merge할 브랜치와 master브랜치와의 merge commit가 실행되어 master브랜치로 통합되는 것 fast forward가 가능한 경우라도  non fast forward옵션을 지정하여merge할 브랜치를 그대로 보존할 수 있습니다.</li></ul><h1>.gitignore</h1><blockquote><p>버전관리 대상에서 제외하고싶은 파일 및 폴더 관리<br>.gitignore 파일 생성 후 아래와 같이 추가하여 버전관리 대상에서 제외할 수 있습니다.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.js # 해당 확장파일 모두 제외</span><br><span class="line">tmp/ # 해당 폴더하위 모두 제외</span><br></pre></td></tr></table></figure><h1>git config</h1><blockquote><p>–global 옵션 없이 선언하면 설정값은 해당 저장소에만 유효합니다. 프로젝트마다 다른 name, email 을 사용하고 싶으면 --global 옵션 제거하고 설정합니다.</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global --list # 전체 설정값 확인</span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">&quot;jaewon&quot;</span> # <span class="built_in">set</span><span class="built_in"> user </span>name</span><br><span class="line">git<span class="built_in"> config </span>--global user.name # <span class="built_in">get</span><span class="built_in"> user </span>name</span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">&quot;j@gamil.com&quot;</span> # <span class="built_in">set</span><span class="built_in"> user </span>email</span><br><span class="line">git<span class="built_in"> config </span>--global user.email # <span class="built_in">get</span><span class="built_in"> user </span>email</span><br></pre></td></tr></table></figure><h1>remote</h1><blockquote><p>최초에 github과 같은 서비스에서 remote 저장소를 생성성(git init)하여 clone 받을 수 도 있지만, 로컬에서 저장소를 생성하여 리모트로 푸시하거나 로컬에서 리모트 저장소의 주소나 이름, 브랜치등 삭제등을 수행할 수 있습니다.</p></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> 저장소이름 <span class="string">https</span>:// <span class="comment"># 로컬에 리모트 저장소에대한 참조 추가</span></span><br><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="string">rename</span> 저장소이름 새저장소이름 <span class="comment"># 로컬의 리모트 저장소 이름변경</span></span><br><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="string">rm</span> 저장소이름 <span class="comment"># 로컬의 리모트저장소 삭제</span></span><br><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="string">update</span> <span class="string">origin</span> –<span class="string">prune</span> <span class="comment"># 리모트 브랜치 기준 로컬브랜치 싱크 맞추기</span></span><br><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="string">remote</span>저장소이름 리모트<span class="string">url</span> <span class="comment"># 리모트 저장소 변경</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">remote</span>저장소이름 로컬브랜치</span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">remote</span>저장소이름 로컬브랜치:뉴브랜치이름 <span class="comment"># 리모트 브랜치생성</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> –<span class="string">delete</span> 리모트브랜치명 <span class="comment"># 리모트 브랜치삭제</span></span><br><span class="line"><span class="string">git</span> <span class="string">pull</span> ( <span class="string">fetch</span>[저장소에서 변경사항 가져오기] + <span class="string">merge</span>[가져와서 브랜치합치기] )</span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> 리모트 저장소경로 <span class="comment"># 리모트 저장소 로컬에 받기</span></span><br><span class="line"><span class="string">git</span> <span class="string">checkout</span> -<span class="string">t</span> <span class="string">origin</span>/리모트 브랜치 이름 <span class="comment"># 리모트저장소의 브랜치 받기</span></span><br><span class="line"><span class="string">git</span> <span class="string">branch</span> -<span class="string">r</span> <span class="comment"># 리모트 저장소 보기</span></span><br></pre></td></tr></table></figure><h1>diff</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="regexp">//</span> 워킹 디렉토리와 스테이지간 비교</span><br><span class="line">git diff –-cached <span class="regexp">//</span> 스테이지와 저장소에 커밋된 파일 비교</span><br><span class="line">git diff HEAD~<span class="number">1</span> <span class="regexp">//</span> HEAD 에서 이전 <span class="number">1</span>개 커밋과의 diff 보기</span><br><span class="line">git diff 체크섬<span class="number">1</span> 체크섬<span class="number">2</span> <span class="regexp">//</span> 두 체크섬간 diff 비교</span><br></pre></td></tr></table></figure><h1>log</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p fileName <span class="comment"># fileName을 해당 path에 맞춰 사용하면 파일에대한 diff만 확인할 수 있다.</span></span><br><span class="line">git <span class="built_in">log</span> –<span class="keyword">since</span>=yyyy-mm-dd –<span class="keyword">until</span>=yyyy-mm-dd <span class="comment"># 날짜사이의 로그 필터링</span></span><br><span class="line">git <span class="built_in">log</span> –<span class="keyword">since</span>=&lt;<span class="built_in">date</span>&gt;, –<span class="keyword">after</span>=&lt;<span class="built_in">date</span>&gt; <span class="comment"># Show commits more recent than a specific date.</span></span><br><span class="line">git <span class="built_in">log</span> –<span class="keyword">until</span>=&lt;<span class="built_in">date</span>&gt;, –<span class="keyword">before</span>=&lt;<span class="built_in">date</span>&gt; <span class="comment"># Show commits older than a specific date.</span></span><br><span class="line">git <span class="built_in">log</span> –grep=<span class="string">&quot;검색할 str&quot;</span>; <span class="comment"># 대소문자구문</span></span><br><span class="line">git <span class="built_in">log</span> –grep=<span class="string">&quot;검색할 str&quot;</span> -i; <span class="comment"># 대소문자구분없음 </span></span><br><span class="line">git <span class="built_in">log</span> –graph <span class="comment"># 커맨드라인에서 그래프로 보여줌</span></span><br><span class="line">git <span class="built_in">log</span> –graph –all <span class="comment"># 모든 branch의 그래프를 보여줌</span></span><br><span class="line">git <span class="built_in">log</span> –author =<span class="string">&quot;jw9651″ #커미터 검색</span></span><br><span class="line"><span class="string">git shortlog # 저장소에 참여한 모든 사용자가 만들어낸 커밋의 숫자를 알파벳 순서로 정렬하여 출력</span></span><br><span class="line"><span class="string">git shortlog -n # 알파벳 순이아닌 커밋 횟수순</span></span><br><span class="line"><span class="string">git shortlog -e # 작업자 이름옆에 이메일 메타데이터 출력</span></span><br><span class="line"><span class="string">git shortlog -s # 스테이지/커밋 숫자들만 출력</span></span><br><span class="line"><span class="string">ex)</span></span><br><span class="line"><span class="string">git log –grep=&quot;</span>SDU<span class="number">-5054</span>″ -i –author=<span class="string">&quot;jw9651″</span></span><br><span class="line"><span class="string">history | grep &quot;</span>push<span class="string">&quot;</span></span><br><span class="line"><span class="string">git reflog | grep merge | grep 5054</span></span><br></pre></td></tr></table></figure><h1>merge</h1><p>일반적인 master의 HEAD 포인터를(컨플릭트시 병합하여) 가장 앞의 커밋으로 옮기는 fast-forward 방식의 merge 입니다. 변경 이력을 모두 확인할 수 있습니다.</p><!--# rebasemerge 할 토픽 브랜치를 master 브랜치 기반의 새로운 패치를 만들어 기준 브랜치의 맨 앞으로 병합합니다. // git rebase master기준브랜치그 다음 master 브랜치로 checkout 한 다음 git rebase 토픽 브랜치 (master브랜치에 젤 앞에 있는 커밋 == 임시패치)를 하면 master가 rebase 의 패치로 HEAD를 가리키게됩니다.이 방법은 전체적인 이력을 확인하기가 어렵기 때문에 적절히(local 브랜치) 사용하는게 좋습니다.rebase는 예를들어 non fast forward한 경우 topic브랜치에서 git rebase master를 할 경우 master의 HEAD를 new base로 지정하고 topic브랜치에서 발생한 커밋들을 쌓아가는것. 자르고 붙이는 느낌이 강하다. --><h1>reset</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> 파일명 // stage -&gt; unstage로변경, add취소</span><br><span class="line">git <span class="keyword">reset</span> –hard하면 이전으로만 돌아감</span><br><span class="line"></span><br><span class="line">git <span class="keyword">reset</span> –soft 식별id: <span class="comment"># add 는 된상태로 </span></span><br><span class="line">git <span class="keyword">reset</span> –mixed 식별id: <span class="comment"># add하기 전 untracted 로 </span></span><br><span class="line">git <span class="keyword">reset</span> –hard 식별id: <span class="comment"># 해당 커밋 로그 untracted 파일 까지 삭제</span></span><br><span class="line">git <span class="keyword">reset</span> --hard origin/master <span class="comment"># </span></span><br><span class="line">git <span class="keyword">reset</span> a.txt // a.txt 파일만 스테이지에서 워킹디렉토리로( tracked -&gt; untracted )</span><br></pre></td></tr></table></figure><h1>commit</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message here&quot;</span></span><br><span class="line">git commit –amend <span class="regexp">//</span> 커밋했는데 빠진 파일이나 수정한파일이 있거나, 커밋 메시지 수정하고 싶을 때 사용, 커밋 이력은 추가되지 않는다.</span><br></pre></td></tr></table></figure><h1>branch</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="regexp">//</span> 사용가능한 브랜치 목록</span><br><span class="line">git branch 브랜치명 <span class="regexp">//</span> 브랜치생성 헤더는 기존 브랜치에 유지</span><br><span class="line">git checkout -b 브랜치명 <span class="regexp">//</span> git branch 브랜치명 + git checkout 브랜치명 과동일</span><br><span class="line">git checkout 브랜치명 <span class="regexp">//</span> 해당 브랜치로 이동</span><br><span class="line">git checkout 체크섬 <span class="regexp">//</span> 치면 해당 커밋시점으로 돌아감</span><br><span class="line">git branch -d 브랜치명 <span class="regexp">//</span>브랜치삭제</span><br></pre></td></tr></table></figure><h1>stash</h1><blockquote><p>워킹 디렉토리에 unstaged 파일들을 백업하고 워킹디렉토리를 깨끗한 상태 즉 HEAD의 상태로 만듭니다.</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="regexp">//</span> unstaged파일 백업, 워킹디렉토리 head 상태</span><br><span class="line">git stash list <span class="regexp">//</span> stash 리스트 보기</span><br><span class="line">git stash apply <span class="regexp">//</span> stash 꺼내서 적용</span><br><span class="line">git stash drop stash@&#123;<span class="number">0</span>&#125; <span class="regexp">//</span> stash삭제</span><br><span class="line">git stash pop <span class="regexp">//</span> 스태시 적용하고 적용한 스태시 삭제</span><br><span class="line">git stash clear <span class="regexp">//</span> 전체 stash list를 삭제</span><br></pre></td></tr></table></figure><h1>revert</h1><blockquote><p>remote 저장소에 원치 않는 커밋이 푸시되었을 경우 가장 확실하게 복구할 수 있는 거의 유일한 방법입니다.</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">revert</span> 체크섬 # 해당 커밋에 대한 <span class="built_in">revert</span>만 수행</span><br><span class="line">git <span class="built_in">revert</span> 체크섬.. # 체크섬 바로 이전 커밋까지 <span class="built_in">revert</span> 커밋로그 남기며 <span class="built_in">revert</span> 수행</span><br></pre></td></tr></table></figure><p>revert를 사용하게 되는 경우 크게 아래 두가지 형상이 있을 수 있습니다.</p><ol><li>remote 저장소의 head~ revert 하고싶은 커밋 사이에 <strong>나의 이력만</strong> 있는 경우</li><li>remote 저장소의 head~ revert 하고싶은 커밋 사이에 <strong>나의 이력</strong>과 <strong>다른 작업자의 이력</strong>이 함께 남아있는 경우</li></ol><p>두 경우 모두 revert 커밋 로그를 revert 마다 하나씩 남기는 <code>git revert 체크섬..</code> 방법을 추천합니다. 각 커밋에 대한 revert 이력을 남길 수 있어 저장소의 히스토리를 놓치지 않고 파악할 수 있습니다. 그리고 컨플릭을 해소할 경우에도 한번에 많은 해소 보다는 각 revert 시 발생하는 컨플릭에 대해서만 해소해 주면 되기 때문에 revert 후 혹 문제가 생겼을 경우 수습할 범위도 줄어들게 됩니다.</p><p>아무튼 작업자가 여러명인 저장소의 경우는 매우 골치아픈 상황이 발생할 수 있기 때문에 원격 저장소에 푸시시 신중하도록 하며, 혹시 모를 상황에 대비하여 로컬 저장소에서 rebase 사용하여 원격 저장소의 이력을 깔끔하게 관리할 수 있게 하는게 좋은 것 같습니다.</p><h1>cherry-pick</h1><blockquote><p>다른 브랜치의 원하는 커밋만 뽑아서 현재 브랜치에 merge 시킬 수 있는 아주 유용한 기능입니다.</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> cherry-pick 체크섬 </span><br></pre></td></tr></table></figure><h1>alias</h1><p>.config 파일의 alias 를 수정합니다. .config 는 .git/ 디렉토리에 있으며 프로젝트, 저장소의 정의 설정파일입니다.<br>여기서 자주 사용하는 명령에 대한 alias 를 생성할 수 있습니다.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">local</span> <span class="keyword">alias</span><span class="variable">.ad</span> add</span><br><span class="line">git <span class="keyword">config</span> --gloabl <span class="keyword">alias</span><span class="variable">.st</span> status</span><br></pre></td></tr></table></figure><p>위와 같이 각각 로컬, 글로벌에 <code>add -&gt; ad</code>, <code>status -&gt; st</code> 로 alias를 선언해 주었습니다.<br>.config 파일을 열어보면 아래와 같이 추가되어 있는 것을 확인하실 수 있습니다.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[alias]</span></span><br><span class="line">    <span class="attr">ad</span> = add</span><br><span class="line">    <span class="attr">st</span> = status</span><br></pre></td></tr></table></figure><h1>delete file</h1><p>tracking 대상인 파일 삭제시 그냥 지우면(rm -rf) <code>Change but not updated</code> 라고 계속 뜹니다.<br><code>git rm a.txt</code> 를 사용하여 파일을 삭제하면 working directory 에서 삭제되고 삭제된 파일은 git 의 deleted 목록에 있습니다. 이 상태에서 commit 하면 tracted 목록에서 삭제됩니다.<br>이미 파일을 stage에 추가했다면 다음과 같은 애러가 출력됩니다. <code>error: the following file has changes staged in the index:</code> 이럴경우 -f 옵션을 주어( <code>git rm -f a.txt</code> ) 강제로 삭제할 수 있습니다.</p><!--ssh-agent -sssh-key 등록 멀티 키 등록 ssh public key 등록-->]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git command line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 블로그 입문 가이드</title>
      <link href="/2019/01/17/hexo-start-manual/"/>
      <url>/2019/01/17/hexo-start-manual/</url>
      
        <content type="html"><![CDATA[<h1>Why Blog</h1><p>개발자로써 자신이 학습한 내용을 정리하고 공유하기 위한 플랫폼으로 블로그 만한게 없는 것 같습니다.<br>미래의 나를 위해서도 도움이 되지만 내가 학습하고 이해한 내용이 맞는지 다른 개발자들에게 검증을 받고 의견을 교환할 수 있는 채널이기도 합니다.</p><p>4~5년 전부터 유료 호스팅에 wordpress 기반의 블로그를 운영해 왔습니다. 방문자들과 커뮤니케이션도 간간히 있었고 게시판과 광고도 붙이고 나름 저만의 컨텐츠는 쌓아왔습니다. 재미는 있었지만 점점 관리에 소홀해지고 도메인, 호스트 비용만 나가다 보니 불만이 쌓여져 갔습니다.</p><p>새해를 맞아 같은 블로그지만 새로운 환경에서 새로운 마음가짐으 블로그를 운영하기 위해 <strong>Hexo</strong> 라는 프레임워크를 선택하게 되었고 꾸준히 관심을 가지고 운영해볼 생각입니다. 저처럼 블로그를 운영해 보고 싶으신 분들을 위해 <strong>Hexo + Gihub Page</strong> 로 블로그를 운영하는 방법을 정리해 봤습니다.</p><blockquote><p>다행히 Hexo에서 <code>wordpress migration</code>을 지원하네요 ^^<br>필요한 포스트들은 옮겨올 수 있도록 해야겠습니다.</p></blockquote><p>보시고 궁금한점 있으시면 언제든지 코멘트 남겨주세요 :)</p><h1>Hexo ?</h1><p>Hexo는 Markdonw 문법을 지원하는 블로그 프레임워입니다.</p><h3 id="Hexo-장점"><a class="header-anchor" href="#Hexo-장점"></a>Hexo 장점</h3><ol><li>직접 html 태그를 생성할 필요 없이 잘 정리한 .md 파일을 .html 파일로 변환해준다.</li><li>명령어 한줄로 Github, Heroku등 다양 서버에 배포가 가능하다.</li><li>Wordpress와 같이 다양한 Theme와 Plugin이 있고 커스텀 할 수 있다.</li><li>호스팅 비용이 무료다.(Hexo 때문에 무료인건 아니지만 github, heroku 등을 사용하여 블로그를 무료로 서비스할 수 있다.)</li><li>저장소를 clone 받아 어디서든 포스팅을 작성하고 배포할 수 있다.</li><li>간편하게 Google Analytics 붙여 사이트를 분석할 수 있다.</li><li>Disqus를 붙여 간편하게 댓글 시스템을 사용할 수 있다.</li><li>광고도 간편하게 붙일 수 있을 것 같다?</li><li><a href="https://hexo.io/">Document</a>가 잘 정리되어 있으며 <a href="https://hexo.io/ko/">한국어</a>도 지원한다.</li><li>git으로 버전 관리가 가능하다.</li></ol><h1>Setup</h1><ul><li><a href="https://nodejs.org/en/">NodeJS</a> 설치</li><li><a href="https://git-scm.com/">Git</a> 설치</li><li>Github에 포스트 버전 관리를 위한 저장소 생성<ul><li>cresumerjang.github.io-src</li></ul></li><li>Github에 포스트 배포(호스팅용) 저장소 생성<ul><li>저장소명은 domain으로 쓸 이름(<a href="http://cresumerjang.github.io">cresumerjang.github.io</a>)으로 합니다.<ul><li><img src="repo_name_for_hexo.png" alt="sad"></li></ul></li><li>포스트 배포(호스팅용) 저장소 -&gt; settings -&gt; GitHub Pages 옵 활성화 합니다.<ul><li><img src="github_page_active.png" alt="asd"></li></ul></li></ul></li></ul><p>위 4가지 작업을 마쳤으면 본격적으로 Hexo를 사용하기 위한 Setup을 합니다.</p><p>우선 Hexo를 전역으로 설치합니다.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -<span class="keyword">g</span> --<span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>Hexo를 초기화하기 위해 아래의 명령을 수행합니다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo init &lt;folder&gt;</span></span><br><span class="line">hexo init myHexoBlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd &lt;folder&gt;</span></span><br><span class="line">cd myHexoBlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 포스트 버전 관리를 위해 만들어 두었던 저장소를 원격 저장소로 연결해 줍니다.</span></span><br><span class="line">git remote add origin https:<span class="regexp">//gi</span>thub.com<span class="regexp">/cresumerjang/</span>cresumerjang.github.io-src</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 초기화에 필요한 package 설치</span></span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><p>초기화가 완료되면 다음과 같은 폴더 구조를 확인할 수 있습니다.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config<span class="variable">.yml</span> # 프레임워크 환경설정 파일</span><br><span class="line">├── <span class="keyword">package</span><span class="variable">.json</span> # 어플리케이션 데이터 파일</span><br><span class="line">├── scaffolds # 포스생성시 참조되는 레이아웃 위치 [page<span class="variable">.md</span>, post<span class="variable">.md</span>, draft<span class="variable">.md</span>]</span><br><span class="line">├── source # html 파일로 변환되어 public/ 폴더로 이동할 웹 사이트 컨텐츠(<span class="variable">.md</span>) 위치</span><br><span class="line">|   ├── _drafts # draft 레이아웃 사용시 위치하며 <span class="keyword">generate</span> 명령어 실행시 제외 됨, publish 명령어로 source/_posts/로 이동</span><br><span class="line">|   └── _posts # <span class="keyword">generate</span> 명령어로 public/ 폴더로 이동</span><br><span class="line">└── themes # 테마 설치 위치</span><br></pre></td></tr></table></figure><h1>Commands</h1><p>설정에 앞서 유용하거나 자주 사용하는 Hexo 명령어의 사용법에 대해서 알아보겠습니다<br>명령어에 대한 자세한 설명은 <a href="https://hexo.io/ko/docs/commands">Hexo Command Documentation</a>에서 확인하실 수 있습니다.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init<span class="meta"> [folder]</span></span><br></pre></td></tr></table></figure><p>웹 사이트를 초기화합니다. folder가 준비되어 있지 않다면 Hexo는 현재 디렉토리에 웹 사이트를 세팅합니다.</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>새 글(article)을 생성합니다. layout이 준비되어 있지 않다면, Hexo는 _config.yml에 정의된 default_layout을 사용합니다. 만약 title에 공백이 포함된다면 따옴표로 감싸주세요.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure><p>캐시 파일 (db.json) 및 생성된 파일들 (public) 을 삭제합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><p>publish 명령어는 draft 레이아웃으로 작성되어 source/_drafts 위치하고 있 초안 포스트를 source/_posts로 옮기는 작업을 합니다.<br>Hexo 실행 시 --draft 옵션을 추가하거나 _config.yml파일에서 render_drafts를 활성화 하면 draft를 렌더링할 수 있습니다.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line"></span><br><span class="line"># -d, --deploy생성이 종료된 후 deploy 합니다.</span><br><span class="line"># -w, --watch파일의 변경사항을 감시(watch)합니다.</span><br></pre></td></tr></table></figure><p>source/_posts 아래 위치한 포스트들로 public/ 아래에 정적 파일들을 생성합니다.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># -p, --port기본 포트를 덮어씁니다.</span></span><br><span class="line"><span class="meta"># -s, --static 정적인 파일만 구동합니다.</span></span><br><span class="line"><span class="meta"># -l, --log Logger를 활성화 시킵니다. Logger 형식을 덮어씁니다.</span></span><br></pre></td></tr></table></figure><p>로컬 서버를 구동시킵니다. 기본적으로 <a href="http://localhost:4000/">http://localhost:4000/</a> 를 사용합니다.</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> list &lt;<span class="keyword">type</span>&gt;</span><br><span class="line"></span><br><span class="line"># <span class="type">Available</span> types: page, post, route, tag, category</span><br></pre></td></tr></table></figure><p>아래와 같이 경로(route) 목록을 보여줍니다.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> list post</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">01</span>-<span class="number">16</span>  <span class="number">2019</span> Todo list     _posts/<span class="number">2019</span>-Todo.md          my        todo, todo2019</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">01</span>-<span class="number">17</span>  hexo start manual  _posts/hexo-start-manual.md  dev       hex, blog</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">01</span>-<span class="number">17</span>  git revert         _posts/git-revert.md         dev       git, revert</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"># -g, --<span class="keyword">generate</span> Deploy 하기 전에 <span class="keyword">generate</span>를 수행합니다.</span><br></pre></td></tr></table></figure><p><code>_config.yml</code>의 <code>deploy</code> 설정을 참고하여 웹 사이트를 deploy 합니다.</p><h1>Configuration</h1><p>Root 디렉토리에 위치한 <code>_config.yml</code> 파일을 사용해 사이트 환경 설정을 수정할 수 있습니다.<br>각 설정값들에 대한 자세한 설명은 <a href="https://hexo.io/ko/docs/configuration">Hexo Configuration Documentation</a>에서 확인하실 수 있으며, 아래는 제가 사용중인 <code>_config.yml</code> 파일 입니다.</p><p>크게는 <code>#Site, #Url, #Theme, #Deploy, #Writing(post_asset_folder)</code> 정도 수정하였으며 좀 더 디테일한 설정은 Theme의 <code>_config.yml</code>과 각 Post 레이아웃 파일에서 추가로 설정할 수 있습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">http://</span> <span class="comment"># &lt;title&gt; 태그의 텍스트 노드로 들어가며 테마에 따라 UI에 표시</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">개발해서</span> <span class="string">내집</span> <span class="string">장만</span>  <span class="comment"># 테마에 따라 UI에 부주제로 표시</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">웹</span> <span class="string">개발이</span> <span class="string">즐거운</span> <span class="string">개발자의</span> <span class="string">개발</span> <span class="string">이야기</span> <span class="comment"># 보통 &lt;meta&gt; 태그 description 속성 값으로 사용</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">웹개발,</span> <span class="string">프론트개발,</span> <span class="string">UI개발</span> <span class="comment"># 보통 &lt;meta&gt; 태그 keywords 속성 값으로 사용</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Jang</span> <span class="string">Jae</span> <span class="string">Won</span> <span class="comment"># 보통 &lt;meta&gt; 태그 author 속성 값으로 사용</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">ko</span> <span class="comment"># &lt;html lang=&quot;ko&quot;&gt; 주사용 언어 값으로 사용, https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 에서 사용 언 확인하여 사용할 수 있다.</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Seoul</span> <span class="comment"># 타임존 https://en.wikipedia.org/wiki/List_of_tz_database_time_zones 에서 타임존 확인하여 사용할 수 있다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://cresumerjang.github.io</span> </span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts :year-:month-:day-:</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment"># 기본 포스트 레이아웃 /scaffolds 에 draft.md, page.md, post.md 3개 레이아웃을 수정할 수 있다.</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment"># 포스팅마다 개별 asset 디렉토리를 생성해 준다.</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">clean-blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/cresumerjang/cresumerjang.github.io</span></span><br><span class="line">  <span class="attr">branch:</span></span><br><span class="line">  <span class="attr">message:</span></span><br></pre></td></tr></table></figure><h1>Write &amp; Generate</h1><p>포스트를 작성하는 방법을 알아보겠습니다.</p><p>직접 마크다운 파일을 만들 필요없이 hexo 명령어를 통해서 선택한 layout 으로 파일을 생성합니다.<br>레이아웃에 따라서 바로 포스트를 생성할 수 도 있고 초안으로 포스트를 <code>source/_drafts</code>에 생성해 두었다가 <code>publish</code> 명령어를 사용해 <code>source/_posts</code>로 옮긴 후 <code>generate</code> 명령어를 사용해 <code>public/</code>로 내보낼 수 도 있습니다.</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>draft 를 사용한 경우 포스트 작성이 완료되면 아래의 <code>publish</code> 명령어를 실행해 줍니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>publish</code> 명령어는 <code>source/_drafts</code>에 위치하고 있는 초안 포스트를 <code>source/_posts</code>로 옮기는 작업을 합니다.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp; hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><p><code>public/</code> 폴더를 지우고 <code>source/_drafts</code>에 위치하고 있는 포스트를 <code>html</code> 파일로 변환해 <code>public/</code>로 내보냅니다.</p><h3 id="Layout"><a class="header-anchor" href="#Layout"></a>Layout</h3><p>기본 layout은 post 이지만 _config.yml 파일의 default_layout 값을 변경하여 기본 layout을 <code>post, page, draft</code>중 하나로 변경할 수 있습니다.<br><code>scaffolds/post.md</code> post layout 파일을 예시로 보겠습니다. <code>key : value</code> 형태(<code>YAML</code>)로 구성되어 있으며 이 부분을 <code>Front-matter</code>라고 부릅니다. 특정 속성에 변수를 할당하거나 기본 값을 설정해 둘 수 있습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">updated:</span> &#123;&#123; <span class="string">updated</span> &#125;&#125;</span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/assets/contact-bg.jpg</span></span><br><span class="line"><span class="attr">share_cover:</span> <span class="string">/assets/contact-bg.jpg</span></span><br></pre></td></tr></table></figure><h3 id="Font-matter-환경설정-및-기본-값"><a class="header-anchor" href="#Font-matter-환경설정-및-기본-값"></a>Font-matter 환경설정 및 기본 값</h3><div class="table__custom"><table><thead><tr><th>설정</th><th>설명</th><th>기본 값</th></tr></thead><tbody><tr><td>layout</td><td>레이아웃</td><td></td></tr><tr><td>title</td><td>타이틀</td><td></td></tr><tr><td>date</td><td>발행일</td><td>파일이 생성된 날짜</td></tr><tr><td>updated</td><td>갱신일</td><td>파일이 업로드된 날짜</td></tr><tr><td>comments</td><td>포스트에서 comment 기능을 사용할지 여부</td><td>true</td></tr><tr><td>tags</td><td>태그 (page에서는 사용 불가능)</td><td></td></tr><tr><td>categories</td><td>카테고리 (page에서는 사용 불가능)</td><td></td></tr><tr><td>permalink</td><td>포스트의 기본 permalink를 override합니다.</td><td></td></tr></tbody></table></div><p>아래는 선택한 레이아웃에 따라 파일이 생성되는 위치입니다.</p><div class="table__custom"><table><thead><tr><th style="text-align:center">Layout</th><th style="text-align:center">Path</th></tr></thead><tbody><tr><td style="text-align:center">post</td><td style="text-align:center">source/_posts</td></tr><tr><td style="text-align:center">page</td><td style="text-align:center">source</td></tr><tr><td style="text-align:center">draft</td><td style="text-align:center">source/_drafts</td></tr></tbody></table></div><h3 id="Filename"><a class="header-anchor" href="#Filename"></a>Filename</h3><p>기본적으로, Hexo는 post의 제목을 파일명과 동일하게 사용합니다. _config.yml 파일의 new_post_name 설정을 변경하여 기본 파일명을 바꿀 수 있습니다. 예를 들어, :year-:month-:day-:title.md는 포스트가 생성된 날짜를 파일명의 접두사로 사용하게 합니다. 당신은 아래와 같은 placeholder를 사용할 수 있습니다.</p><div class="table__custom"><table><thead><tr><th style="text-align:center">Placeholder</th><th>설명</th></tr></thead><tbody><tr><td style="text-align:center">:title</td><td>Post 제목 (소문자, 공백은 ‘-‘하이픈으로 변경됩니다.)</td></tr><tr><td style="text-align:center">:year</td><td>연도를 생성합니다. 예. 2015</td></tr><tr><td style="text-align:center">:month</td><td>월을 생성합니다. (0이 붙습니다.), 예. 04</td></tr><tr><td style="text-align:center">:i_month</td><td>월을 생성합니다. (0이 붙지 않습니다.), 예. 4</td></tr><tr><td style="text-align:center">:day</td><td>일을 생성합니다. (0이 붙습니다.), 예. 07</td></tr><tr><td style="text-align:center">:i_day</td><td>일을 생성합니다. (0이 붙지 않습니다.), 예. 7</td></tr></tbody></table></div><h1>Deploy</h1><p>Github 저장소에 배포를 위해서 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>을 설치해 주고 메인 <code>_config.yml</code>에 deploy 환경을 설정합니다.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p><code>hexo-deployer-git</code> 설치</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> 파일에 deploy 환경 설정</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> </span><br></pre></td></tr></table></figure><p>위 두작업이 완료되면 <code>deploy</code> 명령어로 github 저장소에 배포(실제로는 push 행위)합니다.</p><p>해당 저장소의 Github 페이지 주수로 잘 배포되었는지 확인합니다.<br><a href="https://cresumerjang.github.io/">https://cresumerjang.github.io/</a></p><p>여기까지 진행하면 Hexo를 사용하여 블로그를 운영할 수 있습니다.<br>아래는 추가 Topic으로 하나씩 해결해 가면 다뤄볼 예정입니다.</p><h1>Site Analytics</h1><p>Google Analytics (미작성)</p><h1>Advertisement</h1><p>Google Ad (미작성)</p><h1>Add Comment System to Hexo</h1><p><a href="/2019/11/17/hexo-add-comments/">Hexo Disqus 댓글 기능 추가하기</a></p>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hex </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
